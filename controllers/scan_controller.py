from models.scan_model import ScanModel
from views.scan_view import ScanView


class ScanController(object):
    def __init__(self):
        self.model = ScanModel()
        self.scan_view = ScanView(self)
        self.project_file = None
        self.ip = None

    def get_widget(self):
        return self.scan_view.get_ui()

    def get_thread(self):
        return self.model.thread()

    def start_scan(self, ports):
        if not self.ip:
            self.scan_view.error("IP not found")
        elif not ports:
            self.scan_view.error("Port(s) not found")
        elif not self.scan_view.get_filters():
            self.scan_view.error("Choose a filter")
        elif self.model.is_running():
            self.scan_view.error("A scanning is running")
        else:
            self.scan_view.prepare_view()

            self.model.start(self.ip, ports)

    def set_project_file(self, project_file, new=True):
        self.project_file = project_file
        self.ip = str(self.project_file.read_value("Information", "IP"))
        if not new:
            self.__load_targets()
        else:
            self.scan_view.new_scan()

    def get_items(self):
        targets = []
        row, col = self.scan_view.get_row_col()
        for i in xrange(row):
            item = map(lambda j: self.scan_view.get_item(i, j), range(col))
            targets.append(self.model.parse_table(item))

        return targets

    def save_targets(self):
        targets = self.get_items()
        if targets:
            for i, target in enumerate(targets):
                section = "Target_%s" % i
                value_read_port = self.project_file.read_value(section, "Port")
                if not value_read_port == target.port:
                        self.project_file.write_on_section(section,
                                                           "Protocol",
                                                           target.protocol)
                        self.project_file.write_on_section(section,
                                                           "Port",
                                                           target.port)
                        self.project_file.write_on_section(section,
                                                           "Name",
                                                           target.name)
                        self.project_file.write_on_section(section,
                                                           "State",
                                                           target.state)
                        self.project_file.write_on_section(section,
                                                           "Product",
                                                           "%s %s" % (target.product, target.version))
                        self.project_file.write_on_section(section,
                                                           "Extra",
                                                           target.extra_info)
                else:
                    pass
            return True
        else:
            return False

    def __load_targets(self):
        i = 0
        items = []
        while self.project_file.has_section("Target_%s" % i):
            items.append(self.project_file.read_section("Target_%s" % i))
            i += 1

        self.scan_view.load_items(self.model.parse_file(items))
