from importlib import import_module
from os import listdir
from os.path import splitext, isdir, join

from views.misc.messagebox import MessageBox
from views.widgets.vulnerabilitiesview import VulnerabilitiesView


class VulnerabilitiesController(object):
    def __init__(self, parent):
        self.__vulnerabilitiesView = VulnerabilitiesView(self, parent)
        self.__projectFile = None
        self.__IP = None
        self.__MAC = None
        self.findRouters()

    def findExploits(self, router, model):
        exploits = []
        files = filter(lambda e: model.lower() in e ,
                       [splitext(f)[0]
                        for f in listdir("./modules/routers/{0}".format(router.lower()))
                        if f.endswith(".py")
                        and not f.startswith("__")
                 ])

        try:
            for exploit in files:
                e = import_module('.routers.{0}.{1}'.format(router.lower(), exploit), 'modules')
                # Create an exploit object and we set IP and MAC
                e = e.Exploit()
                e.setIP(self.__IP)
                e.setMAC(self.__MAC)
                exploits.append(e)
            return exploits
        except ImportError:
            return exploits

    def findRouters(self):
        routers = [f.capitalize() for f in listdir("./modules/routers") if isdir(join("./modules/routers", f))]
        self.__vulnerabilitiesView.setRouters(routers)

    def getModelsForRouter(self, router):
        if router:
            try:
                #Use set for remove duplicates
                models = set([splitext(f)[0].split("_")[0].upper()
                          for f in listdir("./modules/routers/{0}".format(router.lower()))
                            if f.endswith(".py") and not f.startswith("__")
                          ])
                self.__vulnerabilitiesView.setModels(models)
            except ImportError:
                return None
        else:
            return None

    def getWidget(self):
        return self.__vulnerabilitiesView

    def saveExploits(self):
        #TODO Falta guardar estos exploits
        return True

    def setProjectFile(self, projectFile):
        self.__projectFile = projectFile
        self.__IP = str(self.__projectFile.readValue("Information", "IP"))
        self.__MAC = str(self.__projectFile.readValue("Information", "MAC"))
        #self.__vulnerabilitiesView.setEnabledItems(True)

    def start(self, router, model):
        if not router or not model:
            MessageBox.critical("Error", "You must to choose a router and model")
        else:
            exploits = self.findExploits(router, model)
            if exploits:
                self.__projectFile.write("Information", "Router", router)
                self.__projectFile.write("Information", "Model", model)
                self.__vulnerabilitiesView.show()
                self.__vulnerabilitiesView.setExploits(exploits)
            else:
                MessageBox.critical("Error", "We can not found exploits for your router")