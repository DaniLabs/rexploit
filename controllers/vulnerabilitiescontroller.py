# Imports
from importlib import import_module
from os import listdir
from os.path import splitext, isdir, join
from views.misc.messagebox import MessageBox
from views.widgets.vulnerabilitiesview import VulnerabilitiesView
from lib.io.parse import sectionsToExploit
from sys import modules


class VulnerabilitiesController(object):

    """
        This class is a controller that manages the 'Report View' and all action that are related with
        create a PDF.
    """

    def __init__(self, parent):
        """Initialize the controller object and all attributes that it needs"""
        self.__view = VulnerabilitiesView(self, parent)
        self.__projectFile = None
        self.__IP = None
        self.__MAC = None
        # Find routers
        self.findRouters()

    def importExploits(self, files, route, refresh=False):
        """
        Import all exploits that we found and want to import.
        :param files: the files that will import
        :param route: generic or specific
        :param refresh: True if we want to re-import, False otherwise
        :return: exploits imported
        """
        exploits = []
        try:
            for exploit in files:
                name = 'modules.{0}.{1}'.format(route, exploit)

                if refresh:
                    modules.pop(name)

                # Reload all modules
                if name in modules.keys():
                    # Get a module
                    e = modules.get(name)
                else:
                    # Import a new module
                    e = import_module('.{0}.{1}'.format(route, exploit), 'modules')

                # Create an exploit object and we set IP and MAC
                e = e.Exploit()
                e.setIP(self.__IP)
                e.setMAC(self.__MAC)

                exploits.append(e)
            return exploits
        except ImportError:
            return exploits

    def findExploits(self, router, refresh=False):
        """
        Find all exploits that we want to import
        :param router: generic or specific
        :param refresh: True if we want to re-import, False otherwise
        :return: exploits found (generic + specific)
        """
        # Generic exploits
        files = filter(lambda x: x,
                       [splitext(f)[0]
                        for f in listdir("./modules/generic/")
                        if f.endswith(".py") and not f.startswith("__")])

        generic = self.importExploits(files, 'generic', refresh)

        if router == "None":
            return generic
        else:
            # Specific exploits
            files = filter(lambda x: x,
                           [splitext(f)[0]
                            for f in listdir("./modules/routers/{0}".format(router.lower()))
                            if f.endswith(".py") and not f.startswith("__")])

            specific = self.importExploits(files, 'routers.{0}'.format(router.lower()), refresh)

            return generic + specific

    def findRouters(self, refresh=False):
        """
        Find all routers and each router is a package (folder)
        :param refresh: True if we want to re-import, False otherwise
        :return: None
        """
        routers = [f.capitalize() for f in listdir("./modules/routers")
                   if isdir(join("./modules/routers", f)) and
                   not f.startswith("__")]

        self.__view.setRouters(routers, refresh)

    def getWidget(self):
        """
        Get the widget view
        :return: the widget
        """
        return self.__view

    def refreshExploits(self):
        """
        This function is executed when refresh button is pushed
        :return:
        """
        self.__view.refreshExploits()

    def save(self):
        """
        Save all items on a file. Firstly we get all items that appear on table and we save it.
        :return: True if it was saved successfully, False otherwise.
        """

        self.__projectFile.write("Information", "Router", self.__view.getRouterActive())

        exploits = self.__view.getExploitSuccess()
        if exploits:
            for i, exploit in enumerate(exploits):
                section = "Exploit_%s" % i
                try:
                    self.__projectFile.write(section, "Name", exploit.getName())
                    self.__projectFile.write(section, "Authors", exploit.getAuthors())
                    self.__projectFile.write(section, "Description", exploit.getDescription())
                    self.__projectFile.write(section, "CWE", exploit.getCWE())
                    self.__projectFile.write(section, "Targets", exploit.getTarget())
                    self.__projectFile.write(section, "References", exploit.getReferences())
                except Exception as e:
                    MessageBox.critical("Error", e.message)
                    return False

        return True

    def setProjectFile(self, projectFile):
        """
        Set a project file object
        :param projectFile: a project file object
        :return: None
        """
        self.__projectFile = projectFile
        self.__IP = str(self.__projectFile.readValue("Information", "IP"))
        self.__MAC = str(self.__projectFile.readValue("Information", "MAC"))
        self.__view.setComboBoxRouter(str(self.__projectFile.readValue("Information", "ROUTER")))

        # Get all exploits
        items = self.__projectFile.getSections("Exploit")
        self.__view.setItemsLoaded(sectionsToExploit(items))

    def start(self, router):
        """
        This function is executed when combobox router changed.
        :param router: the router that we select
        :return: None
        """
        exploits = self.findExploits(router)
        if exploits:
            self.__view.show()
            self.__view.setExploits(exploits)
        else:
            MessageBox.critical("Error", "We can not found exploits for this router")
