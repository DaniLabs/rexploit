from importlib import import_module
from os import listdir
from os.path import splitext, isdir, join
from views.misc.messagebox import MessageBox
from views.widgets.vulnerabilitiesview import VulnerabilitiesView
from lib.io.parse import sectionsToExploit


class VulnerabilitiesController(object):
    def __init__(self, parent):
        self.__vulnerabilitiesView = VulnerabilitiesView(self, parent)
        self.__projectFile = None
        self.__IP = None
        self.__MAC = None
        self.__vulnerabilitiesView.setEnabledItems(False)
        self.findRouters()

    def findExploits(self, router):
        generic = self.findExploitsGeneric()
        if router == "None":
            specific = []
        else:
            specific = self.findExploitsRouters(router)
        return generic + specific

    def findExploitsGeneric(self):
        exploits = []
        files = filter(lambda x: x,
                       [splitext(f)[0]
                        for f in listdir("./modules/generic/")
                        if f.endswith(".py") and not f.startswith("__")])
        try:
            for exploit in files:
                e = import_module('.generic.{0}'.format(exploit), 'modules')
                # Create an exploit object and we set IP and MAC
                e = e.Exploit()
                e.setIP(self.__IP)
                e.setMAC(self.__MAC)
                exploits.append(e)
            return exploits
        except ImportError:
            return exploits

    def findExploitsRouters(self, router):
        exploits = []
        files = filter(lambda x: x,
                       [splitext(f)[0]
                        for f in listdir("./modules/routers/{0}".format(router.lower()))
                        if f.endswith(".py") and not f.startswith("__")])
        try:
            for exploit in files:
                e = import_module('.routers.{0}.{1}'.format(router.lower(), exploit), 'modules')
                # Create an exploit object and we set IP and MAC
                e = e.Exploit()
                e.setIP(self.__IP)
                e.setMAC(self.__MAC)
                exploits.append(e)
            return exploits
        except ImportError:
            return exploits

    def findRouters(self):
        routers = [f.capitalize() for f in listdir("./modules/routers")
                   if isdir(join("./modules/routers", f)) and
                   not f.startswith("__")]
        self.__vulnerabilitiesView.setRouters(routers)

    def getWidget(self):
        return self.__vulnerabilitiesView

    def saveExploits(self):
        exploits = self.__vulnerabilitiesView.getExploitSuccess()
        if exploits:
            for i, exploit in enumerate(exploits):
                section = "Exploit_%s" % i
                try:
                    self.__projectFile.write(section, "Name", exploit.getName())
                    self.__projectFile.write(section, "Authors", exploit.getAuthors())
                    self.__projectFile.write(section, "Description", exploit.getDescription())
                    self.__projectFile.write(section, "CWE", exploit.getCWE())
                    self.__projectFile.write(section, "Targets", exploit.getTarget())
                    self.__projectFile.write(section, "References", exploit.getReferences())
                except Exception as e:
                    MessageBox.critical("Error", e.message)
                    return False

            return True

    def setProjectFile(self, projectFile):
        self.__projectFile = projectFile
        self.__IP = str(self.__projectFile.readValue("Information", "IP"))
        self.__MAC = str(self.__projectFile.readValue("Information", "MAC"))
        self.__vulnerabilitiesView.setComboBoxRouter(str(self.__projectFile.readValue("Information", "ROUTER")))
        items = self.__projectFile.getSections("Exploit")
        self.__vulnerabilitiesView.setItemsLoaded(sectionsToExploit(items))

    def start(self, router):
        if not router:
            MessageBox.critical("Error", "You have to choose a router and model")
        else:
            exploits = self.findExploits(router)
            if exploits:
                self.__projectFile.write("Information", "Router", router)
                self.__vulnerabilitiesView.show()
                self.__vulnerabilitiesView.setExploits(exploits)
            else:
                MessageBox.critical("Error", "We can not found exploits for this router")
