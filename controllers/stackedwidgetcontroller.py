# Imports
from views.widgets.exploits.authenticationbypassview import AuthenticationBypassView
from views.widgets.exploits.backdoorview import BackdoorView
from views.widgets.exploits.bruteforceview import BruteForceView
from views.widgets.exploits.bruteforcewebview import BruteForceWebView
from views.widgets.exploits.generatorview import GeneratorView
from views.widgets.exploits.informationdisclosureview import InformationDisclosureView
from views.widgets.exploits.localfileinclusionview import LocalFileInclusionView
from views.misc.messagebox import MessageBox


class StackedWidgetController(object):

    """
        This class is a controller that manages a stacked widget.
        It is use to get a better control over exploits widgets
    """

    def __init__(self, parent):
        """Initialize the controller object and all attributes that it needs"""
        # Store all widgets
        self.__widgets = {}

        # Store the exploits' name as key and widget as value
        self.__exploits = {}

        self.__parent = parent

    def addWidget(self, widget):
        """
        Add a widget to dict
        :param widget: the widget that we want to add
        :return: None
        """
        widget.hide()
        self.__widgets[widget.category] = widget

    def getWidget(self, category):
        """
        Get the widget associate to the category and his parent
        :param category: category name
        :return: a widget
        """
        try:
            widget = self.__widgets[category]
            return widget.__class__(self.__parent)
        except KeyError:
            return None

    def getWidgetWithExploit(self, exploit):
        """
        Get the widget associate with this exploit name
        :param exploit: exploit's name
        :return: a widget
        """
        return self.__exploits[exploit] if exploit in self.__exploits else None

    def loadWidgets(self):
        """
        Load all widgets
        :return: None
        """
        try:
            self.addWidget(AuthenticationBypassView(self.__parent))
            self.addWidget(BackdoorView(self.__parent))
            self.addWidget(BruteForceView(self.__parent))
            self.addWidget(BruteForceWebView(self.__parent))
            self.addWidget(GeneratorView(self.__parent))
            self.addWidget(InformationDisclosureView(self.__parent))
            self.addWidget(LocalFileInclusionView(self.__parent))
        except EOFError as e:
            MessageBox.critical("Error", str(e))
        except AttributeError as e:
            MessageBox.critical("Error", str(e))
            exit(-1)

    def setExploitWidget(self, name, widget):
        """
        Set the exploit's name as key and widget as value
        :param name: exploit's name
        :param widget: a widget
        :return: None
        """
        self.__exploits[name] = widget
