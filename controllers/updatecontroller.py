from os import listdir, walk, getcwd
from os.path import splitext, join, isfile
from hashlib import md5
from json import dump, load


class UpdateController(object):
    def __init__(self):
        self.__name = "update.json"
        if not isfile(self.__name):
            self.createJSONLocal()

    def readJSON(self):
        with open(self.__name) as data_file:
            data = load(data_file)

        return data

    def createJSONLocal(self):

        fileJSON = self.writeJSON("auxiliary")
        fileJSON.update(self.writeJSON("generic"))
        fileJSON.update(self.writeJSON("routers"))
        checksum = "{0}{1}{2}".format(fileJSON['generic']['id'], fileJSON['auxiliary']['id'], fileJSON['routers']['id'])

        checksum = self.__hashMD5(checksum)
        data = {"modules": fileJSON, "id": checksum}

        with open(self.__name, "a") as outfile:
            dump(data, outfile, indent=4)

    def writeJSON(self, folder):
        path = join(getcwd(), "modules/" + folder + "/")
        out = []

        if folder == "routers":
            checksum = ""
            for root, dirs, files in walk(path, topdown=False):
                for dir in dirs:
                    data = self.filesToJSON(path + dir + "/", folder + "/")
                    checksum += data['id']
                    out.append(data)

            data = {"folder": folder, "id": self.__hashMD5(checksum), folder: out}

        else:
            data = self.filesToJSON(path, folder + "/")

        return {folder: data}

    def filesToJSON(self, path, url):
        out = []
        checksumPath = ""
        files = filter(lambda x: x,
                       [[join(path + splitext(f)[0] + splitext(f)[1]), splitext(f)[0]]
                        for f in listdir(path)
                        if f.endswith(".py") and not f.startswith("__")])

        for f in files:
            path, name = f
            checksumFile = self.__hashMD5(path, 'f')

            data = {"name": "{}.py".format(f[1]),
                    "id": checksumFile,
                    "url": join(url + name)}

            # Create a checksum of all checksum's
            checksumPath += checksumFile
            out.append(data)

        folder = {"folder": path.split("/")[-2], "id": self.__hashMD5(checksumPath), "files": out}

        return folder

    @staticmethod
    def __hashMD5(data, mode='s'):
        # string it is by default
        if mode == 's':
            return md5(data.encode()).hexdigest()
        # file
        elif mode == 'f':
            return md5(open(data, 'rb').read()).hexdigest()
