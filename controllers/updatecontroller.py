from os import listdir, walk, getcwd
from os.path import splitext, join, isfile
from lib.io.network import downloadFile
from hashlib import md5
from json import dump, load
from views.dialog.updateview import UpdateView


class UpdateController(object):
    def __init__(self):
        self.__remote = "server.json"
        self.__local = "update.json"
        self.__IP = "127.0.0.1"
        self.__URL = "http://{0}".format(self.__IP)
        self.__updateView = UpdateView()

    def createJSONLocal(self):
        if not isfile(self.__local):
            fileJSON = self.writeJSON("auxiliary")
            fileJSON.update(self.writeJSON("generic"))
            fileJSON.update(self.writeJSON("routers"))

            checksum = "{0}{1}{2}".format(fileJSON['generic']['id'],
                                          fileJSON['auxiliary']['id'],
                                          fileJSON['routers']['id'])
            # Checksum from modules folder
            checksum = self.__hashMD5(checksum)
            data = {"modules": fileJSON, "id": checksum}

            with open(self.__local, "a") as outfile:
                dump(data, outfile, indent=4)

    def downloadUpdates(self, items):
        base = join(getcwd() + "/" + "modules/")
        for item in items:
            # path = item['url'] + "/" + item['name']
            path = join(base + item['url'] + ".py")
            url = '{0}/modules/{1}'.format(self.__URL, item['url'] + ".py")
            downloadFile(path, url)

    def filesToJSON(self, path, url):
        out = []
        checksumPath = ""
        if path.split("/")[-2] in url:
            url = ""

        files = filter(lambda x: x,
                       [[join(path + splitext(f)[0] + splitext(f)[1]), splitext(f)[0]]
                        for f in listdir(path)
                        if f.endswith(".py") and not f.startswith("__")])

        for f in files:
            path, name = f
            folder = path.split("/")[-2]
            checksumFile = self.__hashMD5(path, 'f')

            data = {"name": "{}.py".format(f[1]),
                    "id": checksumFile,
                    "url": join(url + folder)}

            # Create a checksum of all checksum's
            checksumPath += checksumFile
            out.append(data)

        folder = {"folder": path.split("/")[-2], "id": self.__hashMD5(checksumPath), "files": out}

        return folder

    def getItemsDiff(self, local, remote, new):
        items = []
        for item in remote:

            # Update
            update = [x for x in local
                      if x['name'] == item['name'] and x['id'] != item['id']]
            # Add
            add = [item for x in new if x == item['name']]

            if update:
                items.append(update[0])
            if add:
                items.append(add[0])

        return items

    def getFilesToUpdate(self):
        local, remote = self.getUpdateFiles()
        if local and remote:
            if local['id'] != remote['id']:
                local = local['modules']
                remote = remote['modules']

                # auxiliary
                auxiliary = self.searchFilesOnFolder('auxiliary', local, remote)

                # generic
                generic = self.searchFilesOnFolder('generic', local, remote)

                # routers
                routers = self.searchFilesOnFolder('routers', local, remote)

                return auxiliary, generic, routers
        else:
            return None, None, None

    def searchDifferences(self, local, remote):
        remote = [x['name'] for x in remote]
        local = [x['name'] for x in local]

        # Searching differences between local and remote files
        return list(set(remote).difference(local))

    def searchFilesOnFolder(self, folder, local, remote):
        items = []
        try:
            if remote[folder]['id'] != local[folder]['id']:
                if folder in ['auxiliary', 'generic']:
                    new = self.searchDifferences(local[folder]['files'], remote[folder]['files'])
                    items = self.getItemsDiff(local[folder]['files'], remote[folder]['files'], new)
                elif folder in ['routers']:
                    for remote in remote[folder]['files']:
                        # Get a folder whose id is different
                        local = [x for x in local[folder]['files']
                                 if x['folder'] == remote['folder'] and x['id'] != remote['id']]

                        # Get all items's folder
                        if local:
                            local = [x['files'] for x in local][0]
                            remote = remote['files']

                            new = self.searchDifferences(local, remote)
                            items = self.getItemsDiff(local, remote, new)
        except KeyError:
            pass
        finally:
            return items

    def getUpdateFiles(self):
        self.createJSONLocal()
        with open(self.__local) as dataFile:
            local = load(dataFile)

        # Download file from server
        path = getcwd() + "/" + self.__remote
        url = '{0}/{1}'.format(self.__URL, self.__remote)
        if downloadFile(path, url):
            with open(self.__remote) as dataFile:
                remote = load(dataFile)

            return local, remote
        else:
            return None, None

    def show(self):
        self.__updateView.show()

    def update(self):
        self.__updateView.show()
        self.__updateView.setResult("Creating '{0}' file ".format(self.__local))
        self.createJSONLocal()
        self.__updateView.setResult("Downloading '{0}' file ".format(self.__remote))
        self.getFilesToUpdate()
        self.__updateView.setResult("Updating exploits...")
        auxiliary, generic, routers = self.getFilesToUpdate()
        self.__updateView.setResult("Found: \n"
                                    "{0} auxiliary exploits \n"
                                    "{1} generic exploits \n"
                                    "{2} routers exploits".format(len(auxiliary), len(generic), len(routers)))
        self.downloadUpdates(auxiliary)
        self.downloadUpdates(generic)
        self.downloadUpdates(routers)
        self.__updateView.setProgressBarState(3)


    def writeJSON(self, folder):
        path = join(getcwd(), "modules" + "/" + folder + "/")
        out = []

        if folder == "routers":
            checksum = ""
            for root, dirs, files in walk(path, topdown=False):
                for dir in dirs:
                    data = self.filesToJSON(path + dir + "/", folder + "/")
                    checksum += data['id']
                    out.append(data)

            data = {"folder": folder, "id": self.__hashMD5(checksum), "files": out}

        else:
            data = self.filesToJSON(path, folder + "/")

        return {folder: data}

    @staticmethod
    def __hashMD5(data, mode='s'):
        # string it is by default
        if mode == 's':
            return md5(data.encode()).hexdigest()
        # file
        elif mode == 'f':
            return md5(open(data, 'rb').read()).hexdigest()
