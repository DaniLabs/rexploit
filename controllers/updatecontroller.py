from os import listdir, walk, getcwd
from os.path import splitext, join, isfile
from hashlib import md5
from json import dump, load
import requests


class UpdateController(object):
    def __init__(self):
        self.__remote = "server.json"
        self.__local = "update.json"
        self.__IP = "127.0.0.1"
        self.__URL = "http://{0}".format(self.__IP)
        self.createJSONLocal()

    def getFilesToUpdate(self):
        local, remote = self.readJSON()
        if local and remote:
            if local['id'] != remote['id']:
                local = local['modules']
                remote = remote['modules']

                # auxiliary and generic
                itemsAuxiliary = self.getItemsToUpdate('auxiliary', local, remote)
                itemsGeneric = self.getItemsToUpdate('generic', local, remote)

                # routers
                itemsRouters = self.getExploitsToUpdate('routers', local, remote)

                return itemsAuxiliary, itemsGeneric, itemsRouters
        else:
            return None, None, None

    def createJSONLocal(self):
        if not isfile(self.__local):
            fileJSON = self.writeJSON("auxiliary")
            fileJSON.update(self.writeJSON("generic"))
            fileJSON.update(self.writeJSON("routers"))
            checksum = "{0}{1}{2}".format(fileJSON['generic']['id'], fileJSON['auxiliary']['id'], fileJSON['routers']['id'])

            checksum = self.__hashMD5(checksum)
            data = {"modules": fileJSON, "id": checksum}

            with open(self.__local, "a") as outfile:
                dump(data, outfile, indent=4)

    def downloadUpdates(self):
        auxiliary, generic, routers = self.getFilesToUpdate()
        base = join(getcwd() + "/" + "modules/")
        for item in auxiliary:
            # path = item['url'] + "/" + item['name']
            path = base + item['url'] + ".py"
            url = '{0}/modules/{1}'.format(self.__URL, item['url'] + ".py")
            self.downloadFile(path, url)

    def downloadFile(self, path, url):
        with open(path, 'wb') as handle:
            # stream=True for raw files
            response = requests.get(url, stream=True)
            if response.ok:
                for block in response.iter_content(1024):
                    handle.write(block)
                return True
            else:
                return False

    def filesToJSON(self, path, url):
        out = []
        checksumPath = ""
        if path.split("/")[-2] in url:
            url = ""

        files = filter(lambda x: x,
                       [[join(path + splitext(f)[0] + splitext(f)[1]), splitext(f)[0]]
                        for f in listdir(path)
                        if f.endswith(".py") and not f.startswith("__")])

        for f in files:
            path, name = f
            folder = path.split("/")[-2]
            checksumFile = self.__hashMD5(path, 'f')

            data = {"name": "{}.py".format(f[1]),
                    "id": checksumFile,
                    "url": join(url + folder)}

            # Create a checksum of all checksum's
            checksumPath += checksumFile
            out.append(data)

        folder = {"folder": path.split("/")[-2], "id": self.__hashMD5(checksumPath), "files": out}

        return folder

    def getExploitsToUpdate(self, name, local, remote):
        items = []

        if remote[name]['id'] != local[name]['id']:
            for filesRemote in remote[name]['files']:
                # Get a folder whose id is different
                itemsLocal = [item for item in local[name]['files']
                              if item['folder'] == filesRemote['folder'] and item['id'] != filesRemote['id']]
                # Get all items's folder
                if itemsLocal:
                    itemsLocal = [itemLocal['files'] for itemLocal in itemsLocal][0]
                    itemsRemote = filesRemote['files']
                    remoteFiles = [x['name'] for x in itemsRemote]
                    localFiles = [x['name'] for x in itemsLocal]
                    newFiles = list(set(remoteFiles).difference(localFiles))

                    for itemRemote in itemsRemote:
                        # Update
                        update = [x for x in itemsLocal
                                  if x['name'] == itemRemote['name'] and x['id'] != itemRemote['id']]

                        # Add
                        add = [itemRemote for x in newFiles if x == itemRemote['name']]

                        if update:
                            items.append(update[0])
                        if add:
                            items.append(add[0])
        return items

    def getItemsToUpdate(self, name, local, remote):
        items = []
        try:
            if remote[name]['id'] != local[name]['id']:
                remoteFiles = [x['name'] for x in remote[name]['files']]
                localFiles = [x['name'] for x in local[name]['files']]
                newFiles = list(set(remoteFiles).difference(localFiles))

                for item in remote[name]['files']:

                    # Update
                    update = [x for x in local[name]['files']
                              if x['name'] == item['name'] and x['id'] != item['id']]

                    # Add
                    add = [item for x in newFiles if x == item['name']]

                    if update:
                        items.append(update[0])
                    if add:
                        items.append(add[0])
        except KeyError:
            pass
        finally:
            return items

    def readJSON(self):
        self.createJSONLocal()
        with open(self.__local) as dataFile:
            local = load(dataFile)

        path = getcwd() + "/" + self.__remote
        url = '{0}/{1}'.format(self.__URL, self.__remote)
        if self.downloadFile(path, url):
            with open(self.__remote) as dataFile:
                remote = load(dataFile)

            return local, remote
        else:
            return None, None

    def writeJSON(self, folder):
        path = join(getcwd(), "modules" + "/" + folder + "/")
        out = []

        if folder == "routers":
            checksum = ""
            for root, dirs, files in walk(path, topdown=False):
                for dir in dirs:
                    data = self.filesToJSON(path + dir + "/", folder + "/")
                    checksum += data['id']
                    out.append(data)

            data = {"folder": folder, "id": self.__hashMD5(checksum), "files": out}

        else:
            data = self.filesToJSON(path, folder + "/")

        return {folder: data}

    @staticmethod
    def __hashMD5(data, mode='s'):
        # string it is by default
        if mode == 's':
            return md5(data.encode()).hexdigest()
        # file
        elif mode == 'f':
            return md5(open(data, 'rb').read()).hexdigest()
