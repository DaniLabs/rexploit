from lib.io.pdf import PDF
from lib.io.parse import removeHTML, CWEToLink
from views.dialog.reportview import ReportView


class ReportController(object):
    def __init__(self):
        self.__projectFile = None
        self.__reportView = ReportView(self)

    def writeGeneralInformation(self, pdf):
        pdf.titleSection("General Information", 1)
        pdf.writeText("Project's name: ", self.__projectFile.readValue("Information", "Name"), 30)
        pdf.writeText("IP Address: ", self.__projectFile.readValue("Information", "IP"), 22)
        pdf.writeText("MAC Address: ", self.__projectFile.readValue("Information", "MAC"), 28)
        pdf.writeText("OUI: ", self.__projectFile.readValue("Information", "OUI"), 12)
        pdf.writeText("Company: ", self.__projectFile.readValue("Information", "Company"), 20)
        pdf.writeText("Router: ", self.__projectFile.readValue("Information", "Router"), 15)

    def writeExploitAvailable(self, pdf):
        items = self.__projectFile.getSections("Exploit")
        if items:
            pdf.titleSection("Exploits available", 1)
            for i, section in enumerate(items, 1):
                pdf.titleSection("#{0} Exploit".format(i), 2)
                pdf.writeText("Name: ", section[0][1], 15)
                pdf.writeText("Author(s): ", section[1][1], 20)
                # Get description and split by dot
                description = str(section[2][1])
                if description.endswith("."):
                    description = description[:-1]

                tokens = description.replace(". ", ".").split(".")
                l = len(tokens)
                for x, token in enumerate(tokens):
                    if x == 0:
                        pdf.writeText("Description: ", token, 25)
                    elif x != l:
                        pdf.writeText("", token, 25)

                cwe = removeHTML(CWEToLink(int(section[3][1])))
                pdf.writeText("CWE: ", cwe, 15)
                pdf.writeText("Targets: ", section[4][1], 20)
                pdf.writeText("References: ", removeHTML(section[5][1]), 25)

    def writePortsServices(self, pdf):
        items = self.__projectFile.getSections("Target")
        if items:
            pdf.titleSection("Ports & services available", 1)
            items = self.__projectFile.getSections("Target")
            for i, section in enumerate(items, 1):
                pdf.titleSection("#{0} Service".format(i), 2)
                pdf.writeText("Protocol: ", section[0][1], 20)
                pdf.writeText("Port: ", section[1][1], 10)
                pdf.writeText("Service: ", section[2][1], 20)
                pdf.writeText("State: ", section[3][1], 15)
                pdf.writeText("Product: ", section[4][1], 20)
                pdf.writeText("Extra: ", section[5][1], 20)

    @staticmethod
    def writeComment(pdf, comment):
        if comment != "":
            pdf.titleSection("Comments", 1)

            if comment.endswith("."):
                comment = comment[:-1]

            # Get comment and split by dot
            tokens = (str(comment).replace(". ", ".")).split(".")
            l = len(tokens)
            for x, token in enumerate(tokens):
                if x == 0:
                    pdf.writeText("Comment: ", token, 25)
                elif x != l:
                    pdf.writeText("", token, 25)

    def save(self, path, comment=None):
        pdf = PDF()
        pdf.create()
        
        self.writeGeneralInformation(pdf)
        self.writeExploitAvailable(pdf)
        self.writePortsServices(pdf)
        self.writeComment(pdf, comment)

        pdf.save(path)

    def setProjectFile(self, projectFile):
        self.__projectFile = projectFile

    def show(self):
        self.__reportView.setName(self.__projectFile.readValue("Information", "Name"))
        value = self.__reportView.exec_()

        while value < 0:
            value = self.__reportView.exec_()

        if value > 0:
            return True
        elif value == 0:
            return False
