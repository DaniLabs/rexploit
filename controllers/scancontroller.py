from lib.communicate import Communicate
from lib.parse import sectionsToTargets, itemToTarget
from lib.scanthread import ScanThread
from views.scanview import ScanView


class ScanController(object):
    def __init__(self, parent):
        self.communicate = Communicate()
        self.scanThread = ScanThread(self.communicate)
        self.scanView = ScanView(self, parent)
        self.projectModel = None
        self.ip = None

        self.communicate.finish.connect(self.scanView.setItemsScanned)

    def getWidget(self):
        return self.scanView

    def setProjectModel(self, projectModel, new):
        self.projectModel = projectModel
        self.ip = str(self.projectModel.readValue("Information", "IP"))
        if not new:
            self.getItemsFromProjectModel()
        else:
            self.scanView.restartView()

    def initialize(self, ports):
        if not self.ip:
            self.scanView.error("IP not found")
        elif not ports:
            self.scanView.error("Port(s) not found")
        elif not self.scanView.activeFilters():
            self.scanView.error("Choose a filter")
        elif self.scanThread.isRunning():
            self.scanView.error("A scanning is running")
        else:
            self.scanView.activateScanView()
            self.scanThread.host = self.ip
            self.scanThread.ports = ports
            self.scanThread.start()


    def saveTargets(self):
        targets = self.getItemsTable()
        if targets:
            for i, target in enumerate(targets):
                section = "Target_%s" % i
                if not self.projectModel.readValue(section, "Port") == target.port:
                        self.projectModel.writeOnSection(section,
                                                           "Protocol",
                                                         target.protocol)
                        self.projectModel.writeOnSection(section,
                                                           "Port",
                                                         target.port)
                        self.projectModel.writeOnSection(section,
                                                           "Name",
                                                         target.name)
                        self.projectModel.writeOnSection(section,
                                                           "State",
                                                         target.state)
                        self.projectModel.writeOnSection(section,
                                                           "Product",
                                                           "%s %s" % (target.product, target.version))
                        self.projectModel.writeOnSection(section,
                                                           "Extra",
                                                         target.extra_info)
                else:
                    pass
            return True
        else:
            return False

    def getItemsTable(self):
        targets = []
        row, col = self.scanView.rowColCount()

        for i in xrange(row):
            item = map(lambda j: self.scanView.getItem(i, j), range(col))
            targets.append(itemToTarget(item))

        return targets

    def getItemsFromProjectModel(self):
        i = 0
        items = []
        while self.projectModel.hasSection("Target_%s" % i):
            items.append(self.projectModel.readSection("Target_%s" % i))
            i += 1

        self.scanView.setItemsLoaded(sectionsToTargets(items))
