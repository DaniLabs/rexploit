from lib.io.profiles import Profiles
from lib.scan.communicate import Communicate
from lib.scan.parse import Parse
from lib.scan.scanthread import ScanThread
from views.misc.messagebox import MessageBox
from views.widgets.scanview import ScanView


class ScanController(object):
    def __init__(self, parent):
        self.communicate = Communicate()
        self.scanThread = ScanThread(self.communicate)
        self.scanView = ScanView(self, parent)
        self.profiles = Profiles()
        self.projectFile = None
        self.ip = None

        # Connect signal
        self.communicate.finish.connect(self.scanView.setItemsScanned)

    def loadProfiles(self):
        profiles = self.profiles.getProfiles()
        self.scanView.addProfiles(profiles)

    def getCommand(self, profile):
        return self.profiles.getCommand(profile, "command")

    def getWidget(self):
        return self.scanView

    def setProjectModel(self, projectModel, new):
        self.projectFile = projectModel
        self.ip = str(self.projectFile.readValue("Information", "IP"))
        if not new:
            self.getItemsFromProjectModel()
        else:
            self.scanView.restartView()

    def initialize(self, arguments):
        if not self.ip:
            MessageBox.critical("Error","IP not found")
        elif not arguments:
            MessageBox.critical("Error","Command is empty")
        elif self.scanThread.isRunning():
            MessageBox.critical("Error","A scanning is running")
        else:
            self.scanView.activateScanView()
            self.scanThread.setHost(self.ip)
            self.scanThread.setArguments(arguments)
            self.scanThread.start()

    def cancel(self):
        self.scanThread.terminate()
        self.scanView.restartView()

    def saveTargets(self):
        targets = self.getItemsTable()
        if targets:
            for i, target in enumerate(targets):
                section = "Target_%s" % i
                if not self.projectFile.readValue(section, "Port") == target.port:
                        self.projectFile.writeOnSection(section,
                                                           "Protocol",
                                                        target.protocol)
                        self.projectFile.writeOnSection(section,
                                                           "Port",
                                                        target.port)
                        self.projectFile.writeOnSection(section,
                                                           "Name",
                                                        target.name)
                        self.projectFile.writeOnSection(section,
                                                           "State",
                                                        target.state)
                        self.projectFile.writeOnSection(section,
                                                           "Product",
                                                           "{0} {1}".format(target.product, target.version))
                        self.projectFile.writeOnSection(section,
                                                           "Extra",
                                                        target.info)
                else:
                    pass
            return True
        else:
            return False

    def getItemsTable(self):
        targets = []
        row, col = self.scanView.rowColCount()

        for i in xrange(row):
            item = map(lambda j: self.scanView.getItem(i, j), range(col))
            targets.append(Parse.itemToTarget(item))

        return targets

    def getItemsFromProjectModel(self):
        i = 0
        items = []
        while self.projectFile.hasSection("Target_%s" % i):
            items.append(self.projectFile.readSection("Target_%s" % i))
            i += 1

        self.scanView.setItemsLoaded(Parse.sectionsToTargets(items))
