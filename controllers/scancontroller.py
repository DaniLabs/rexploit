# Imports
from lib.io.parse import itemToTarget, sectionsToTargets
from lib.thread.communicate import Communicate
from lib.thread.scanthread import ScanThread
from views.misc.messagebox import MessageBox
from views.widgets.scanview import ScanView
from controllers.profilescontroller import ProfilesController


class ScanController(object):
    
    """
        This class is a controller that manages the 'Scan View' and all action that are related with 
        scan an IP.
    """
    
    def __init__(self, parent):
        """Initialize the controller object and all attributes that it needs"""
        # Signal
        self.__communicate = Communicate()
        # Thread
        self.__scanThread = ScanThread(self.__communicate)
        self.__view = ScanView(self, parent)
        self.__profilesController = ProfilesController()
        self.__projectFile = None
        self.__IP = None

        # Connect signal
        self.__communicate.finishScan.connect(self.__view.setItemsScanned)

    def cancel(self):
        """
        This function is executed when scan is cancelled
        :return: None
        """
        self.__scanThread.terminate()
        self.__view.restart()

    def createProfile(self):
        """
        This function is executed when we add a new profile
        :return: None
        """
        self.__profilesController.show()
        self.__view.setPushButtonRemoveProfileEnabled(True)
        profiles = self.__profilesController.getProfiles()
        self.__view.addProfiles(profiles)

    def getCommand(self, profile):
        """
        Get the command associate to a profile.
        :param profile: profile's name
        :return: the command
        """
        return self.__profilesController.getCommand(profile)

    def getWidget(self):
        """
        Get the widget view
        :return: the widget
        """
        return self.__view

    def removeProfile(self, profile):
        """
        Remove the profile that receive
        :param profile: the profile that we want to remove
        :return: None
        """
        if MessageBox.question("Remove Profile", "Do you want remove this profile \'{0}\' ".format(profile)):
            self.__profilesController.removeProfile(profile)
            profiles = self.__profilesController.getProfiles()
            self.__view.addProfiles(profiles)

    def save(self):
        """
        Save all items on a file. Firstly we get all items that appear on table and we save it.
        :return: True if it was saved successfully, False otherwise.
        """
        targets = []
        row, col = self.__view.rowColCount()

        for i in xrange(row):
            item = map(lambda j: self.__view.getItem(i, j), range(col))
            targets.append(itemToTarget(item))

        if targets:
            for i, target in enumerate(targets):
                section = "Target_%s" % i
                try:
                    if not self.__projectFile.readValue(section, "Port") == target.getPort():
                        self.__projectFile.write(section, "Protocol", target.getProtocol())
                        self.__projectFile.write(section, "Port", target.getPort())
                        self.__projectFile.write(section, "Name", target.getName())
                        self.__projectFile.write(section, "State", target.getState())
                        self.__projectFile.write(section, "Product", "{0} {1}".format(target.getProduct(), target.getVersion()))
                        self.__projectFile.write(section, "Extra", target.getInfo())
                except Exception as e:
                    MessageBox.critical("Error", e.message)
                    return False

        return True

    def setProjectFile(self, projectFile, new):
        """
        Set a project file object
        :param projectFile: a project file object
        :param new: True if it is a new project, False otherwise.
        :return: None
        """
        self.__view.addProfiles(self.__profilesController.getProfiles())
        self.__projectFile = projectFile
        self.__IP = str(self.__projectFile.readValue("Information", "IP"))
        if not new:
            items = self.__projectFile.getSections("Target")
            self.__view.setItemsLoaded(sectionsToTargets(items))
        else:
            self.__view.restart()

    def start(self, arguments):
        """
        This function is executed when we start to scan
        Create a thread by each scan
        :param arguments: It is a command
        :return: None
        """
        if not self.__IP:
            MessageBox.critical("Error", "IP not found")
        elif not arguments:
            MessageBox.critical("Error", "Command is empty")
        elif self.__scanThread.isRunning():
            MessageBox.critical("Error", "A scanning is running")
        else:
            self.__view.activateScanView()
            self.__IP = str(self.__projectFile.readValue("Information", "IP"))
            self.__scanThread.setHost(self.__IP)
            self.__scanThread.setArguments(arguments)
            self.__scanThread.start()
