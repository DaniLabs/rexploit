from os import W_OK, access
from os.path import expanduser, join, exists
from PyQt5.uic import loadUi
from PyQt5.QtCore import QRegExp
from PyQt5.QtGui import QRegExpValidator, QValidator
from PyQt5.QtWidgets import QDialog
from views.misc.filedialog import FileDialog
from views.misc.messagebox import MessageBox


class NewProjectView(QDialog):
    def __init__(self, projectController):
        super(NewProjectView, self).__init__()
        self.__projectController = projectController
        loadUi('./resources/ui/dialog/newproject.ui', self)

        self.lineEditLocation.setText(expanduser("~"))
        regex = QRegExp("\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")
        self.__validator = QRegExpValidator(regex, self.lineEditIP)
        self.lineEditIP.setValidator(self.__validator)

        # Connect things
        self.buttonBox.rejected.connect(self.buttonBoxRejected)
        self.buttonBox.accepted.connect(self.buttonBoxAccepted)
        self.toolButton.clicked.connect(self.toolButtonClicked)

    def buttonBoxAccepted(self):
        if self.checkValues():
            self.__projectController = self.__projectController.createProject(
                self.lineEditName.text(),
                self.lineEditIP.text(),
                self.lineEditLocation.text())
            self.accept()
            self.done(1)
        else:
            self.done(-1)

    def buttonBoxRejected(self):
        self.reject()

    def checkValues(self):
        if self.isName() and self.isLocation() and self.isIP():
            return True
        else:
            return False

    def isLocation(self):
        location = str(self.lineEditLocation.text())
        name = str(self.lineEditName.text())
        path = join(location, name + ".ini")
        if not exists(path) and access(str(self.lineEditLocation.text()), W_OK):
            return True
        else:
            MessageBox.critical("Error", "Exist a report with same name on this path ({}).".format(path))
            return False

    def isName(self):
        if self.lineEditName.text():
            return True
        else:
            MessageBox.critical("Error", "You have to complete the information")
            return False

    def isIP(self):
        # Verify if the IP "matches" the regular expression
        IP = self.lineEditIP.text()
        if IP:
            state = self.__validator.validate(IP, 0)[0]
            if state == QValidator.Acceptable:
                if self.__projectController.isAlive(IP):
                    return True
                else:
                    MessageBox.critical("Error", "Destination Host Unreachable.")
                    return False
            else:
                MessageBox.critical("Error", "You have to add a valid IP (0.0.0.0).")
                return False
        else:
            MessageBox.information("Information", "You have not add a IP on this project.")
            return True

    def toolButtonClicked(self):
        self.lineEditLocation.setText(FileDialog.getExistingDirectory())
