# Imports
from os import W_OK, access
from os.path import expanduser
from PyQt5.uic import loadUi
from PyQt5.QtWidgets import QDialog
from views.misc.filedialog import FileDialog
from views.misc.messagebox import MessageBox


class ReportView(QDialog):

    """
        This class is a view inherit from QDialog. This class permits create report in PDF format.
    """
    def __init__(self, reportContoller):
        """Initialize the view object and all attributes that it needs"""
        super(ReportView, self).__init__()
        self.__reportController = reportContoller

    def buttonBoxAccepted(self):
        """This function is executed when buttonBox OK is clicked."""
        location = self.isLocation()
        if location:
            self.__reportController.save(location, self.textEditComment.toPlainText())
            self.accept()
            self.done(1)
        else:
            self.done(-1)

    def buttonBoxRejected(self):
        """This function is executed when buttonBox Cancel is clicked."""
        self.reject()

    def isLocation(self):
        """
        Check if lineEdit location is well formed
        :return: True if we can create a project on this path, False otherwise
        """
        location = str(self.lineEditLocation.text())

        if not location:
            MessageBox.critical("Error", "You have to add a location")
            return None
        else:
            if access(location, W_OK):
                return location
            else:
                MessageBox.critical("Error", "Wrong directory. You must have access tto this directory")
                return None

    def startUi(self):
        """This function checks if ui file exists and then show the view"""
        try:
            loadUi('./resources/ui/dialog/report.ui', self)

            self.lineEditLocation.setText(expanduser("~"))

            # Connect things
            self.buttonBox.rejected.connect(self.buttonBoxRejected)
            self.buttonBox.accepted.connect(self.buttonBoxAccepted)
            self.toolButton.clicked.connect(self.toolButtonClicked)
            return True
        except Exception as e:
            MessageBox.critical("Error", str(e))
            return False

    def toolButtonClicked(self):
        """This function is executed when ToolButton is clicked."""
        self.lineEditLocation.setText(FileDialog.getExistingDirectory())
