# Imports
from PyQt5.uic import loadUi
from PyQt5.QtWidgets import QDialog
from views.misc.messagebox import MessageBox


class UpdateView(QDialog):

    """
        This class is a view inherit from QDialog. This class permits update and upgrade the exploits.
    """

    def __init__(self, updateController):
        """Initialize the view object and all attributes that it needs"""
        super(UpdateView, self).__init__()
        self.__updateController = updateController

    def pushButtonUpdateClicked(self):
        """This function is executed when pushbutton Update is clicked."""
        url = self.lineEditURL.text()

        if not url:
            MessageBox.critical("Error", "URL can not be empty.")
        else:
            auxiliary, generic, routers = self.__updateController.update(url)
            if auxiliary == 0 and generic == 0 and routers == 0:
                pass
            else:
                self.setExploitsUpdated(auxiliary, generic, routers)
                self.pushButtonUpgrade.setEnabled(True)

    def pushButtonUpgradeClicked(self):
        """This function is executed when pushbutton Upgrade is clicked."""
        if self.__updateController.upgrade():
            self.labelResult.setText("All files have been update successfully!")
        else:
            self.labelResult.setText("Sorry. An error happened.")

    def startUi(self):
        """This function checks if ui file exists and then show the view"""
        try:
            loadUi('./resources/ui/dialog/update.ui', self)
            # Connect things
            self.pushButtonUpdate.clicked.connect(self.pushButtonUpdateClicked)
            self.pushButtonUpgrade.clicked.connect(self.pushButtonUpgradeClicked)

            self.lineEditURL.setText("http://127.0.0.1")
            self.labelTitle.setText('Update RExploit')

            self.labelResult.setText("Click on 'Update' for checking new updates.")
            return True
        except Exception as e:
            MessageBox.critical("Error", str(e))
            return False

    def setExploitsUpdated(self, auxiliary, generic, routers):
        """
        Set the number of exploits available for upgrade.
        :param auxiliary: number of exploits auxiliary
        :param generic:  number of exploits generic
        :param routers: number of exploits routers
        :return: None
        """
        self.labelResult.setText("{0} auxiliary exploits are available \n"
                                 "{1} generic exploits are available \n"
                                 "{2} routers exploits are available".format(auxiliary, generic, routers))
