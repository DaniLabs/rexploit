from PyQt5.uic import loadUi
from os import W_OK, access
from os.path import join, exists

from PyQt5.QtCore import QRegExp
from PyQt5.QtGui import QRegExpValidator, QValidator
from PyQt5.QtWidgets import QDialog

from views.misc.filedialog import FileDialog
from views.misc.messagebox import MessageBox


class SettingsView(QDialog):
    def __init__(self, settingsController):
        super(SettingsView, self).__init__()
        self.settingsController = settingsController
        self.name = None
        self.location = None
        loadUi('./views/ui/dialog/settings.ui', self)

        regex = QRegExp("\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")
        self.validator = QRegExpValidator(regex, self.lineEditIP)
        self.lineEditIP.setValidator(self.validator)

        # Connect things
        self.buttonBox.rejected.connect(self.buttonBoxRejected)
        self.buttonBox.accepted.connect(self.buttonBoxAccepted)
        self.toolButton.clicked.connect(self.toolButtonClicked)
        self.pushButtonPing.clicked.connect(self.pushButtonPingClicked)

    def buttonBoxRejected(self):
        self.reject()

    def buttonBoxAccepted(self):
        value = self.checkValues()
        if value == 1:
            data = {'name': self.lineEditProjectName.text(),
                    'location': self.lineEditLocation.text(),
                    'IP': self.lineEditIP.text(),
                    'mac': self.labelMAC.text(),
                    'oui': self.labelOUI.text(),
                    'company': self.labelCompany.text()}
            self.settingsController.saveProjectFile(data)
            self.accept()
            self.done(value)
        elif value == -1:
            MessageBox.critical("Error", "You must to complete the information")
            self.done(value)
        elif value == -2:
            MessageBox.critical("Error", "You have to add an IP")
            self.done(value)
        elif value == -3:
            MessageBox.critical("Error", "Exist a project with same name on this path")
            self.done(value)

    def checkValues(self):
        if self.isName():
            if self.isIP():
                if self.isLocation():
                    return 1
                else:
                    return -3
            else:
                return -2
        else:
            return -1

    def isLocation(self):
        location = str(self.lineEditLocation.text())
        name = str(self.lineEditProjectName.text())
        if location == self.location and name == self.name:
            return True
        else:
            path = join(location, name + ".ini")
            return not exists(path) and access(str(self.lineEditLocation.text()), W_OK)

    def isName(self):
        if self.lineEditProjectName.text():
            return True
        else:
            return False

    def isIP(self):
        # Verify if the IP "matches" the regular expression
        state = self.validator.validate(self.lineEditIP.text(), 0)[0]
        return state == QValidator.Acceptable

    def pushButtonPingClicked(self):
        if self.settingsController.isAlive(self.lineEditIP.text()):
            buttons = self.buttonBox.buttons()
            buttons[0].setEnabled(True)
            mac, oui, company = self.settingsController.getInformation(self.lineEditIP.text())
            self.labelMAC.setText(mac)
            self.labelOUI.setText(oui)
            self.labelCompany.setText(company)
        else:
            buttons = self.buttonBox.buttons()
            buttons[0].setEnabled(False)
            MessageBox.critical("Error", "Destination Host Unreachable")

    def setInformation(self, data):
        self.lineEditProjectName.setText(data['name'])
        self.lineEditLocation.setText(data['location'])
        self.lineEditIP.setText(data['IP'])
        self.labelMAC.setText(data['mac'])
        self.labelOUI.setText(data['oui'])
        self.labelCompany.setText(data['company'])
        self.labelRouter.setText(data['router'])
        self.labelModel.setText(data['model'])

        self.name = data['name']
        self.location = data['location']

    def toolButtonClicked(self):
        self.lineEditLocation.setText(FileDialog.getExistingDirectory())
