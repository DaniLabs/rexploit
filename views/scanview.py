from PyQt5.uic import loadUi

from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtWidgets import QWidget, QTableWidgetItem

from misc.messagebox import showMessageBoxCritical


class ScanView(QWidget):
    def __init__(self, scanController, parent):
        super(ScanView, self).__init__(parent)
        self.scanController = scanController
        loadUi('./views/ui/scan.ui', self)
        self.n = 0

        # Connect buttons
        self.pushButtonScan.clicked.connect(self.pushButtonScanClicked)

        self.progressBar.hide()
        self.setMessageStatus("")

        #TODO Falta hacer expresion regular que solo admita del 21 en adelante y seguidas de comas
        # regex = QRegExp("\d[{1,5}\-\d{1,5}]?\d[{1,5}\,\d{1,5}*")
        # self.validator = QRegExpValidator(regex, self.ui.lineEdit_ports)
        # self.ui.lineEdit_ports.setValidator(self.validator)

    def activeFilters(self):
        filters = []
        if self.checkBoxFiltered.isChecked():
            filters.append("filtered")
        if self.checkBoxOpen.isChecked():
            filters.append("open")

        return filters

    def restartView(self):
        self.tableWidget.setRowCount(0)
        self.setDisabledItems(False)
        self.setMessageStatus("")
        self.setProgressBarState(0)

    def activateScanView(self):
        self.setMessageStatus("Scanning")
        self.setProgressBarState(2)
        self.tableWidget.setRowCount(0)
        self.setDisabledItems(True)

    def setDisabledItems(self, state):
        self.checkBoxOpen.setDisabled(state)
        self.checkBoxFiltered.setDisabled(state)
        self.lineEditPorts.setDisabled(state)

    def setItemsScanned(self, targets):
        filters = self.activeFilters()
        targets = filter(lambda t: t.state in filters, targets)
        row = len(targets)
        self.tableWidget.setRowCount(row)

        for row, target in enumerate(targets):
            print row, target.protocol, target.port, target.name, target.state, \
            "%s %s" % (target.product, target.version), target.info
            if target.state in filters:
                self.addItem(row, target.toList())
            else:
                pass

        self.tableWidget.resizeRowsToContents()
        self.setDisabledItems(False)
        self.setMessageStatus("Found %s port(s)" % len(targets))
        self.setProgressBarState(3)

    def setItemsLoaded(self, targets):
        if targets:
            self.tableWidget.setRowCount(len(targets))
            for row, target in enumerate(targets):
                    self.addItem(row, target.toList())

            self.tableWidget.resizeRowsToContents()
            self.setDisabledItems(False)
            self.setMessageStatus("Found %s port(s)" % len(targets))
            self.setProgressBarState(3)
        else:
            pass

    def rowColCount(self):
        return self.tableWidget.rowCount(), self.tableWidget.columnCount()

    def getItem(self, row, col):
        return str(self.tableWidget.item(row, col).text())

    def setMessageStatus(self, text):
        self.labelStatus.setText(text)

    def setProgressBarState(self, state):
        if state == 0:
            self.progressBar.hide()
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(0)
        elif state == 1:
            self.progressBar.setFormat("Waiting")
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(0)
        elif state == 2:
            self.progressBar.setFormat("Scanning")
            self.progressBar.setRange(0, 0)
            self.progressBar.show()
        elif state == 3:
            self.progressBar.setFormat("Completed")
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(1)
            self.progressBar.show()
        elif state == 4:
            self.progressBar.setFormat("Error")
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(0)
            self.progressBar.show()

    @staticmethod
    def error(message):
        showMessageBoxCritical("Error", message)

    def pushButtonScanClicked(self):
        self.n += 1
        print self.n
        #state = self.validator.validate(self.ui.lineEdit_ports.text(), 0)[0]
        #return state == QValidator.Acceptable
        self.scanController.initialize(str(self.lineEditPorts.text()))

    def addItem(self, row, data):
        icon = QIcon()
        state = data[3] #state

        if state in ["filtered", "closed"]:
            icon.addPixmap(QPixmap("./views/resources/icons/no.png"), QIcon.Normal, QIcon.Off)
        else:
            icon.addPixmap(QPixmap("./views/resources/icons/yes.png"), QIcon.Normal, QIcon.Off)

        self.tableWidget.setVerticalHeaderItem(row, QTableWidgetItem(icon, ""))

        for i, d in enumerate(data):
            self.tableWidget.setItem(row, i, QTableWidgetItem(d))
