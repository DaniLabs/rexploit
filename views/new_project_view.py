import os
from PyQt4 import QtGui, QtCore
from os.path import expanduser

from gen.ui_new_project import UiNewProject


class NewProjectView(QtGui.QWidget):

    def __init__(self, project_controller):
        super(NewProjectView, self).__init__()
        self.project_controller = project_controller
        self.ui = None
        self.validator = None
        self.build_ui()

    def build_ui(self):
        self.ui = UiNewProject()
        self.ui.setup_ui()
        self.ui.lineEdit_location.setText(expanduser("~"))
        regex = QtCore.QRegExp("\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")
        self.validator = QtGui.QRegExpValidator(regex, self.ui.lineEdit_ip)
        self.ui.lineEdit_ip.setValidator(self.validator)
        self.ui.button_cancel.clicked.connect(self.reject)
        self.ui.button_create.clicked.connect(self.accept)

    def accept(self):
        value = self.check_values()
        if value == 1:
            self.project_controller = self.project_controller.create_project(
                    self.ui.lineEdit_name.text(),
                    self.ui.lineEdit_ip.text(),
                    self.ui.lineEdit_location.text())
            self.ui.done(1)
        elif value == -1:
            QtGui.QMessageBox.critical(self, "Error", "You must to complete the information")
        elif value == -2:
            QtGui.QMessageBox.critical(self, "Error", "You have to add a IP")
        elif value == -3:
            QtGui.QMessageBox.critical(self, "Error", "Exist a project with same name on this path")

    def check_values(self):
        if self.ui.lineEdit_name.text():
            if self.check_ip():
                if self.check_location():
                    return 1
                else:
                    return -3
            else:
                return -2
        else:
            return -1

    def check_ip(self):
        # Verify if the IP "matches" the regular expression
        state, pos = self.validator.validate(self.ui.lineEdit_ip.text(), 0)
        return state == QtGui.QValidator.Acceptable

    def check_location(self):
        location = str(self.ui.lineEdit_location.text())
        name = str(self.ui.lineEdit_name.text())
        path = os.path.join(location, name + ".ini")
        return not os.path.exists(path) and os.access(str(self.ui.lineEdit_location.text()), os.W_OK)

    def reject(self):
        self.ui.reject()

    def exec_(self):
        return self.ui.exec_()
