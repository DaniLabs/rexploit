from PyQt5.uic import loadUi

from PyQt5.QtWidgets import QMainWindow

from views.misc.messagebox import MessageBox
from views.resources.resource import qInitResources

class MainView(QMainWindow):
    def __init__(self, mainController, parent=None):
        super(MainView, self).__init__(parent)
        self.mainController = mainController
        qInitResources()
        loadUi('./views/ui/mainwindow.ui', self)

    def buildUI(self, welcomeWidget, vulnerabilitiesWidget, scanWidget):
        # Stack 0 Welcome
        self.stackedWidget.addWidget(welcomeWidget)
        # Stack 1 Vulnerabilities
        self.stackedWidget.addWidget(vulnerabilitiesWidget)
        # Stack 2 Scan
        self.stackedWidget.addWidget(scanWidget)
        # Add stackedWidget into verticalLayout
        self.verticalLayout.addWidget(self.stackedWidget)

        self.setDisabledWidgets()

        # Connect buttons
        # self.treeWidget.itemClicked.connect(lambda: self.printer(self.treeWidget.currentItem()))
        self.actionHome.triggered.connect(self.actionHomeClicked)
        self.actionNewProject.triggered.connect(self.actionNewProjectClicked)
        self.actionOpenProject.triggered.connect(self.actionOpenProjectClicked)
        self.actionSave.triggered.connect(self.actionSaveClicked)
        self.actionVulnerabilities.triggered.connect(self.actionVulnerabilitiesClicked)
        self.actionScan.triggered.connect(self.actionScanClicked)
        self.actionSettings.triggered.connect(self.actionSettingsClicked)
        self.actionAbout.triggered.connect(self.actionAboutClicked)

    # def printer(self, item): print item.text(0)

    def setDisabledWidgets(self):
        self.stackedWidget.hide()
        self.actionSave.setDisabled(True)
        self.actionVulnerabilities.setDisabled(True)
        self.actionScan.setDisabled(True)

    def setEnableddWidgets(self):
        self.stackedWidget.show()
        self.actionSave.setDisabled(False)
        self.actionVulnerabilities.setDisabled(False)
        self.actionScan.setDisabled(False)

    def setMessageStatus(self, message):
        self.statusbar.showMessage(message)

    def actionHomeClicked(self):
        self.stackedWidget.setCurrentIndex(0)
        # self.mainController.actionHome()

    def actionNewProjectClicked(self):
        self.mainController.actionNewProject()

    def actionOpenProjectClicked(self):
        self.mainController.actionOpenProject()

    def actionSaveClicked(self):
        self.mainController.actionSave()

    def actionVulnerabilitiesClicked(self):
        if MessageBox.question("Confirm Scan Router", "Are you sure you want to scan this router?"):
            self.mainController.actionVulnerabilities()
            self.stackedWidget.setCurrentIndex(1)

    def actionScanClicked(self):
        self.stackedWidget.setCurrentIndex(2)
        self.mainController.actionScan()

    def actionSettingsClicked(self):
        self.mainController.actionSettings()

    def actionAboutClicked(self):
        self.mainController.actionAbout()

    # def closeEvent(self, event):
    #     result = QtGui.QMessageBox.question(self,
    #                                         "Confirm Exit",
    #                                         "Are you sure you want to exit ?",
    #                                         QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
    #     event.ignore()
    #     if result == QtGui.QMessageBox.Yes:
    #         event.accept()
