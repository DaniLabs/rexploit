from PyQt5.uic import loadUi

from PyQt5.QtWidgets import QWidget, QTreeWidgetItem

from views.exploits.localfileinclusionview import LocalFileInclusionView


class VulnerabilitiesView(QWidget):
    def __init__(self, vulnerabilitiesController, parent):
        super(VulnerabilitiesView, self).__init__(parent)
        self.vulnerabilitiesController = vulnerabilitiesController
        loadUi('./views/ui/widgets/vulnerabilities.ui', self)

        # Connect thing
        self.treeWidget.itemClicked.connect(lambda x : self.printer(self.treeWidget.currentItem()))

        # Set verticalLayout. It's resize the widget
        self.setLayout(self.horizontalLayout)

        # Stack 0 LocalFileInclusionView
        localFileInclusionView = LocalFileInclusionView(self)
        self.stackedWidget.addWidget(localFileInclusionView)

        localFileInclusionCount = 0

    def printer(self, item):
        print item.text(0)

    #TODO Mostrar todas las vulnerabilidades y si hay un exploit mostrarlo com un hijo
    def setExploits(self, exploits):
        self.exploits = exploits
        plist=['Parent A','Parent B']
        clist=['Child 1','Child 2']
        for parent in plist:
            pitems=QTreeWidgetItem(self.treeWidget)
            pitems.setText(0,parent)
        for child in clist:
            citems=QTreeWidgetItem(pitems)
            citems.setText(0,child)

        #self.addExploits()

    def addExploits(self):
        for exploit in self.exploits:
            self.typeExploit(exploit)

            item = QTreeWidgetItem(self.treeWidget)
            item.setText(0,)


    def typeExploit(self, exploit):
        if exploit.startswith("lfi"):
            self.localFileInclusionCount +=1
            return "Local File Inclusion {0}".format(self.localFileInclusionCount)



