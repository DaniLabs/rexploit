from PyQt5.uic import loadUi

from PyQt5.QtWidgets import QWidget, QTreeWidgetItem

from views.exploits.credentialsbydefaultview import CredentialsByDefaultView
from views.exploits.generatorview import GeneratorView
from views.exploits.localfileinclusionview import LocalFileInclusionView
from views.misc.messagebox import MessageBox


class VulnerabilitiesView(QWidget):
    def __init__(self, vulnerabilitiesController, parent):
        super(VulnerabilitiesView, self).__init__(parent)
        self.vulnerabilitiesController = vulnerabilitiesController
        self.exploits = {}
        loadUi('./views/ui/widgets/vulnerabilities.ui', self)

        # Connect thing
        self.treeWidget.itemClicked.connect(lambda x: self.treeWidgetItemClicked(self.treeWidget.currentItem()))
        self.comboBoxRouter.currentIndexChanged.connect(self.comboBoxRouterChanged)
        self.pushButtonSearch.clicked.connect(self.pushButtonSearchClicked)

        # Add widgets
        localFileInclusionView = LocalFileInclusionView(self)
        credentialsByDefaultView = CredentialsByDefaultView(self)
        generatorView = GeneratorView(self)
        self.stackedWidget.addWidget(localFileInclusionView)
        self.stackedWidget.addWidget(credentialsByDefaultView)
        self.stackedWidget.addWidget(generatorView)

        self.horizontalLayout.addWidget(self.stackedWidget)

        # Set gridLayout. It's resize the widget
        self.setLayout(self.gridLayout)

    def comboBoxRouterChanged(self):
        self.comboBoxModel.clear()
        self.stackedWidget.setCurrentIndex(0)
        self.treeWidget.clear()
        self.vulnerabilitiesController.getModelsForRouter(self.getRouterActive())

    def findExploit(self, name):
        for key, value in self.exploits.iteritems():
            if name in key:
                return value

    def getModelActive(self):
        return self.comboBoxModel.currentText()

    def getRouterActive(self):
        router = self.comboBoxRouter.currentText()
        if "None" in router:
            return None
        else:
            return router

    def pushButtonSearchClicked(self):
        self.treeWidget.clear()
        self.exploits = {}
        self.vulnerabilitiesController.start(self.getRouterActive(), self.getModelActive())

    def saveExploits(self):
        # TODO Falta hacer esta funcion de guardar los exploits de dicho router
        pass

    def setEnabledItems(self, b):
        self.comboBoxRouter.setEnabled(b)
        self.comboBoxModel.setEnabled(b)
        self.pushButtonSearch.setEnabled(b)

    def setExploits(self, exploits):
        for exploit in exploits:
            item = QTreeWidgetItem(self.treeWidget.invisibleRootItem())
            name = exploit.getName()
            item.setText(0, name)
            # Create a dict like {name:exploit}
            self.exploits[name] = exploit

    def setStackedWidget(self, item):
        # Try to find a exploits related with this name
        exploit = self.findExploit(item)

        for i in range(1, self.stackedWidget.count()):
            widget = self.stackedWidget.widget(i)
            # Compare categories
            if widget.getCategory() in exploit.getCategory():
                widget.setExploit(exploit)
                self.stackedWidget.setCurrentIndex(i)
                return

    def setModels(self, models):
        if models:
            for model in models:
                self.comboBoxModel.addItem(str(model))
        else:
            MessageBox.critical("Error", "We can not found models for this router. Try to choose other router.")

    def setRouters(self, routers):
        for router in routers:
            self.comboBoxRouter.addItem(str(router))

    def treeWidgetItemClicked(self, item):
        self.stackedWidget.show()
        self.setStackedWidget(item.text(0))
