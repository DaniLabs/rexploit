from PyQt5.uic import loadUi

from PyQt5.QtWidgets import QWidget, QTreeWidgetItem
from PyQt5.QtGui import QBrush, QColor
from PyQt5.QtCore import Qt

from views.misc.messagebox import MessageBox

from lib.stack.stackedwidget import StackedWidget


class VulnerabilitiesView(QWidget):
    def __init__(self, vulnerabilitiesController, parent):
        super(VulnerabilitiesView, self).__init__(parent)
        self.__vulnerabilitiesController = vulnerabilitiesController
        self.__exploits = {}
        self.__exploitsSuccess = []
        loadUi('./resources/ui/widgets/vulnerabilities.ui', self)

        # Connect thing
        self.treeWidget.itemClicked.connect(lambda x: self.treeWidgetItemClicked(self.treeWidget.currentItem()))
        self.comboBoxRouter.currentIndexChanged.connect(self.comboBoxRouterChanged)
        self.pushButtonAutoCheck.clicked.connect(self.pushButtonAutoCheckClicked)

        # StackedWidget manages all relations between exploits and widgets
        self.__stackedWidget = StackedWidget(self)
        self.horizontalLayout.addWidget(self.stackedWidget)

        # Set gridLayout. It's resize the widget
        self.setLayout(self.gridLayout)

    def addExploitSuccess(self, exploit):
        if exploit not in self.__exploitsSuccess:
            self.__exploitsSuccess.append(exploit)
            root = self.treeWidget.invisibleRootItem()
            for i in range(root.childCount()):
                item = root.child(i)
                if item.text(0) == exploit.getName():
                    item.setForeground(0, QBrush(QColor(Qt.green)))

    def comboBoxRouterChanged(self):
        self.stackedWidget.setCurrentIndex(0)
        self.treeWidget.clear()
        self.__exploits = {}
        self.__exploitsSuccess = []
        self.__vulnerabilitiesController.start(self.getRouterActive())

    def findExploit(self, name):
        for key, value in self.__exploits.iteritems():
            if name == key:
                return value

    def getExploitSuccess(self):
        return self.__exploitsSuccess

    def getRouterActive(self):
        router = self.comboBoxRouter.currentText()
        return None if "None" in router else router

    def pushButtonAutoCheckClicked(self):
        root = self.treeWidget.invisibleRootItem()
        success = 0
        fail = 0
        for i in range(root.childCount()):
            item = root.child(i)
            exploit = self.__exploits[item.text(0)]
            if exploit.check():
                exploit.setVulnerable()
                self.addExploitSuccess(exploit)
                success += 1
                item.setForeground(0, QBrush(QColor(Qt.green)))
            else:
                fail += 1
                item.setForeground(0, QBrush(QColor(Qt.red)))

        self.labelCheck.setText("Result: {0} OK - {1} Fail".format(success, fail))

    def removeExploitSuccess(self, exploit):
        self.__exploitsSuccess.remove(exploit)
        root = self.treeWidget.invisibleRootItem()
        for i in range(root.childCount()):
            item = root.child(i)
            if item.text(0) == exploit.getName():
                item.setForeground(0, QBrush(QColor(Qt.black)))

    def setComboBoxRouter(self, router):
        self.comboBoxRouter.setCurrentIndex(self.comboBoxRouter.findText(router))

    def setEnabledItems(self, state):
        self.comboBoxRouter.setEnabled(state)
        self.pushButtonAutoCheck.setEnabled(state)
        self.pushButtonAutoCheck.setEnabled(state)

    def setExploits(self, exploits):
        for exploit in exploits:
            item = QTreeWidgetItem(self.treeWidget.invisibleRootItem())
            name = exploit.getName()
            item.setText(0, name)
            # Create a dict like {name:exploit}
            self.__exploits[name] = exploit
            widget = self.__stackedWidget.getWidget(exploit.getCategory(), self)
            widget.setExploit(exploit)
            # join an exploit with her widget
            self.__stackedWidget.setExploitWidget(exploit, widget)
            self.stackedWidget.addWidget(widget)
            self.stackedWidget.setCurrentWidget(widget)

    def setStackedWidget(self, item):
        # Try to find a exploits related with this name
        name = item.text(0)
        exploit = self.findExploit(name)
        widget = self.__stackedWidget.getWidgetWithExploit(exploit.getName())
        if widget:
            self.stackedWidget.setCurrentWidget(widget)

    def setItemsLoaded(self, names):
        self.setEnabledItems(True)
        if names:
            root = self.treeWidget.invisibleRootItem()
            for name in names:
                for i in range(root.childCount()):
                    item = root.child(i)
                    if item.text(0) == name:
                        widget = self.__stackedWidget.getWidgetWithExploit(name)
                        widget.setCheckBoxVulnerableChecked()
                        item.setForeground(0, QBrush(QColor(Qt.green)))

    def setModels(self, models):
        if models:
            for model in models:
                self.comboBoxModel.addItem(str(model))
        else:
            MessageBox.critical("Error", "We can not found models for this router. Try to choose other router.")

    def setRouters(self, routers):
        for router in routers:
            self.comboBoxRouter.addItem(str(router))

    def treeWidgetItemClicked(self, item):
        self.stackedWidget.show()
        self.setStackedWidget(item)
