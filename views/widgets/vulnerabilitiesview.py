from PyQt5.uic import loadUi

from PyQt5.QtWidgets import QWidget, QTreeWidgetItem

from lib.vulnerabilities.vulnerabilities import vulnerabilities
from views.exploits.credentialsbydefault import CredentialsByDefaultView
from views.exploits.localfileinclusionview import LocalFileInclusionView
from views.misc.messagebox import MessageBox

class VulnerabilitiesView(QWidget):
    def __init__(self, vulnerabilitiesController, parent):
        super(VulnerabilitiesView, self).__init__(parent)
        self.vulnerabilitiesController = vulnerabilitiesController
        self.exploits = {}
        self.IP = None
        loadUi('./views/ui/widgets/vulnerabilities.ui', self)

        # Connect thing
        self.treeWidget.itemClicked.connect(lambda x : self.treeWidgetItemClicked(self.treeWidget.currentItem()))
        self.comboBoxRouter.currentIndexChanged.connect(self.comboBoxRouterChanged)
        self.pushButtonSearch.clicked.connect(self.pushButtonSearchClicked)

        # Add widgets
        localFileInclusionView = LocalFileInclusionView(self)
        credentialsByDefaultView = CredentialsByDefaultView(self)
        self.stackedWidget.addWidget(localFileInclusionView)
        self.stackedWidget.addWidget(credentialsByDefaultView)

        self.horizontalLayout.addWidget(self.stackedWidget)

        # Set gridLayout. It's resize the widget
        self.setLayout(self.gridLayout)

        #Disable buttons and combobox
        #self.setEnabledItems(False)

    def pushButtonSearchClicked(self):
        self.vulnerabilitiesController.start(self.getRouterActive(), self.getModelActive())

    def treeWidgetItemClicked(self, item):
        self.stackedWidget.show()
        # We only show a items that have a parent
        if item.parent():
            self.setStackedWidget(item.parent().text(0), item.text(0))

    def setEnabledItems(self, b):
        self.comboBoxRouter.setEnabled(b)
        self.comboBoxModel.setEnabled(b)
        self.pushButtonSearch.setEnabled(b)

    def setStackedWidget(self, parent, child):
        # Try to find a exploits related with this child
        exploit = self.findExploit(child)
        for i in range(1, self.stackedWidget.count()):
            widget = self.stackedWidget.widget(i)
            # A widget has a name that appears in a parent
            if widget.getName() in parent:
                widget.setExploit(exploit)
                self.stackedWidget.setCurrentIndex(i)
                pass

    def findExploit(self, name):
        for key, value in self.exploits.iteritems():
            if name in key:
                return value

    def setExploits(self, exploits):
        if not self.exploits:
            for exploit in exploits:
                #Get a parent
                parent = self.getParent((exploit.getFile()).split("_")[0].upper())
                item = QTreeWidgetItem(parent)
                #item = QTreeWidgetItem(self.treeWidget)
                name = exploit.getName()
                item.setText(0, name)
                # Create a dict like {name:exploit}
                self.exploits[name] = exploit

    def getParent(self, vulnerability):
        for i in xrange(self.treeWidget.topLevelItemCount()):
            item = self.treeWidget.topLevelItem(i)
            if vulnerability.upper() in item.text(0):
                return item

        for v in vulnerabilities:
            if vulnerability.upper() in v:
                item = QTreeWidgetItem(self.treeWidget)
                item.setText(0, v)
                return item

    def getRouterActive(self):
        router = self.comboBoxRouter.currentText()
        if "None" in router:
            return None
        else:
            return router

    def getModelActive(self):
        return self.comboBoxModel.currentText()

    def comboBoxRouterChanged(self):
        self.comboBoxModel.clear()
        self.vulnerabilitiesController.getModelsForRouter(self.getRouterActive())

    def setModels(self, models):
        if models:
            for model in models:
                self.comboBoxModel.addItem(str(model))
        else:
            MessageBox.critical("Error", "We can not found models for this router. Try to choose other router.")

    def setRouters(self, routers):
        for router in routers:
            self.comboBoxRouter.addItem(str(router))

    def saveExploits(self):
        #TODO Falta hacer esta funcion de guardar los exploits de dicho router
        print "bu"