from PyQt5.uic import loadUi
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtWidgets import QWidget, QTableWidgetItem, QTableWidget


class ScanView(QWidget):
    def __init__(self, scanController, parent):
        super(ScanView, self).__init__(parent)
        self.__scanController = scanController
        loadUi('./resources/ui/widgets/scan.ui', self)

        # Connect buttons
        self.pushButtonScan.clicked.connect(self.pushButtonScanClicked)
        self.pushButtonCancel.clicked.connect(self.pushButtonCancelClicked)
        self.pushButtonCreateProfile.clicked.connect(self.pushButtonCreateProfileClicked)
        self.pushButtonRemoveProfile.clicked.connect(self.pushButtonRemoveProfileClicked)
        self.comboBoxProfile.currentIndexChanged.connect(self.comboBoxProfileChanged)

        # Set verticalLayout. It's resize the widget
        self.setLayout(self.verticalLayout)

        self.progressBar.hide()
        self.setMessageStatus("")

        self.tableWidget.setSelectionBehavior(QTableWidget.SelectRows)
        self.tableWidget.setSelectionMode(QTableWidget.SingleSelection)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.setShowGrid(False)

        self.setEnabledItems(False)
        self.setPushButtonRemoveProfileEnabled(False)

    def activateScanView(self):
        self.setMessageStatus("Scanning")
        self.setProgressBarState(2)
        self.tableWidget.setRowCount(0)
        self.setEnabledItems(False)
        self.pushButtonCancel.setEnabled(True)

    def addItem(self, row, data):
        icon = QIcon()
        state = data[3]

        if state in ["filtered", "closed"]:
            icon.addPixmap(QPixmap("./resources/icons/no.png"), QIcon.Normal, QIcon.Off)
        else:
            icon.addPixmap(QPixmap("./resources/icons/yes.png"), QIcon.Normal, QIcon.Off)

        self.tableWidget.setVerticalHeaderItem(row, QTableWidgetItem(icon, ""))

        for i, d in enumerate(data):
            item = QTableWidgetItem(d)
            item.setFlags(Qt.ItemIsEnabled)
            self.tableWidget.setItem(row, i, item)

    def addProfiles(self, profiles):
        self.comboBoxProfile.clear()
        if profiles:
            self.setPushButtonRemoveProfileEnabled(True)
            for profile in profiles:
                self.comboBoxProfile.addItem(profile)
        else:
            self.setPushButtonRemoveProfileEnabled(False)

    def comboBoxProfileChanged(self):
            command = self.__scanController.getCommand(self.comboBoxProfile.currentText())
            self.lineEditCommand.setText(command)

    def getItem(self, row, col):
        return str(self.tableWidget.item(row, col).text())

    def restartView(self):
        self.tableWidget.setRowCount(0)
        self.setEnabledItems(True)
        self.setMessageStatus("")
        self.setProgressBarState(0)

    def rowColCount(self):
        return self.tableWidget.rowCount(), self.tableWidget.columnCount()

    def setEnabledItems(self, state):
        self.comboBoxProfile.setEnabled(state)
        self.lineEditCommand.setEnabled(state)
        self.pushButtonScan.setEnabled(state)
        self.pushButtonCancel.setEnabled(state)
        self.pushButtonCreateProfile.setEnabled(state)
        self.tableWidget.setEnabled(state)

    def setItemsLoaded(self, targets):
        self.setEnabledItems(True)
        self.pushButtonCancel.setEnabled(False)

        if targets:
            self.tableWidget.setRowCount(len(targets))
            for row, target in enumerate(targets):
                    self.addItem(row, target.toList())

            self.tableWidget.resizeRowsToContents()

            self.setMessageStatus("Found %s port(s)" % len(targets))
            self.setProgressBarState(3)

    def setItemsScanned(self, targets):
        row = len(targets)
        self.tableWidget.setRowCount(row)

        for row, target in enumerate(targets):
            self.addItem(row, target.toList())

        self.tableWidget.resizeRowsToContents()
        self.tableWidget.resizeColumnsToContents()
        self.setEnabledItems(True)
        self.setMessageStatus("Found %s port(s)" % len(targets))
        self.setProgressBarState(3)
        self.pushButtonCancel.setEnabled(False)

    def setMessageStatus(self, text):
        self.labelStatus.setText(text)

    def setProgressBarState(self, state):
        if state == 0:
            self.progressBar.hide()
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(0)
        elif state == 1:
            self.progressBar.setFormat("Waiting")
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(0)
        elif state == 2:
            self.progressBar.setFormat("Scanning")
            self.progressBar.setRange(0, 0)
            self.progressBar.show()
        elif state == 3:
            self.progressBar.setFormat("Completed")
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(1)
            self.progressBar.show()
        elif state == 4:
            self.progressBar.setFormat("Error")
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(0)
            self.progressBar.show()

    def setPushButtonRemoveProfileEnabled(self, state):
        self.pushButtonRemoveProfile.setEnabled(state)

    def pushButtonCancelClicked(self):
        self.__scanController.cancel()
        self.pushButtonCancel.setEnabled(False)

    def pushButtonCreateProfileClicked(self):
        self.__scanController.createProfile()

    def pushButtonScanClicked(self):
        self.__scanController.start(str(self.lineEditCommand.text()))

    def pushButtonRemoveProfileClicked(self):
        profile = str(self.comboBoxProfile.currentText())
        self.__scanController.removeProfile(profile)
