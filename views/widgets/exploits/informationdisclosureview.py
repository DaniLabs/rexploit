from lib.io.network import Network
from views.misc.messagebox import MessageBox
from interfaces.qexploit import QExploit


class InformationDisclosureView(QExploit):
    def __init__(self, parent):
        super(InformationDisclosureView, self).__init__('informationdisclosure', parent)
        self.category = "disclosure"

        # Connect buttons
        self.pushButtonExploit.clicked.connect(self.pushButtonExploitClicked)
        self.pushButtonCheck.clicked.connect(self.pushButtonCheckClicked)

    def check(self):
        if Network.ping(self.exploit.ip):
            return True
        else:
            MessageBox.critical("Error", "Destination Host Unreachable")
            return False

    def pushButtonCheckClicked(self):
        if self.check():
            if self.exploit.check():
                self.exploit.vulnerable = True
                self.setCheckBoxVulnerableChecked()
            else:
                self.plainTextEditData.appendPlainText("")
                self.plainTextEditData.appendPlainText("Error. The target is not vulnerable")

    def pushButtonExploitClicked(self):
        if self.check():
            self.plainTextEditData.clear()
            try:
                data = self.exploit.default()
                result = self.exploit.run(data)
                self.plainTextEditData.appendPlainText(result)
                if self.exploit.vulnerable:
                    self.setCheckBoxVulnerableChecked()
            except Exception as e:
                MessageBox.critical("Error", str(e))

    def setExploit(self, exploit):
        self.exploit = exploit
        default = self.exploit.default()
        if default:
            self.labelURL.setText(default["url"])
        else:
            self.labelURL.setText("None")
