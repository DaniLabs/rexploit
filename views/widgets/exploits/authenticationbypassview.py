from lib.io.network import Network
from lib.misc.parse import Parse
from views.misc.messagebox import MessageBox
from interfaces.qexploit import QExploit


class AuthenticationBypassView(QExploit):
    def __init__(self, parent):
        super(AuthenticationBypassView,  self).__init__('authenticationbypass', parent)
        self.category = "bypass"

        # Connect buttons
        self.pushButtonExploit.clicked.connect(self.pushButtonExploitClicked)
        self.pushButtonCheck.clicked.connect(self.pushButtonCheckClicked)

    def check(self):
        if Network.ping(self.exploit.ip):
            if self.lineEditData.text():
                return True
            else:
                MessageBox.critical("Error", "You have to complete the data box")
                return False
        else:
            MessageBox.critical("Error", "Destination Host Unreachable")
            return False

    def pushButtonCheckClicked(self):
        if self.check():
            if self.exploit.check():
                self.exploit.vulnerable = True
                self.setCheckBoxVulnerableChecked()
            else:
                self.plainTextEditData.appendPlainText("")
                self.plainTextEditData.appendPlainText("Error. The target is not vulnerable")

    def pushButtonExploitClicked(self):
        if self.check():
            self.plainTextEditData.clear()
            try:
                data = Parse.sanatizeJSONOutput(self.lineEditData.text())
                result = self.exploit.run(data)
                self.plainTextEditData.appendPlainText(result)
                if self.exploit.vulnerable:
                    self.setCheckBoxVulnerableChecked()
            except Exception as e:
                MessageBox.critical("Error", str(e.args))

    def setExploit(self, exploit):
        self.exploit = exploit
        default = self.exploit.default()
        if default:
            default = Parse.sanatizeJSONInput(default)
            self.lineEditData.setText(default)
