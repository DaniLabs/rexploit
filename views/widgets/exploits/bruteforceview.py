from os.path import exists
from PyQt5.uic import loadUi
from PyQt5.QtCore import Qt, QRegExp
from PyQt5.QtGui import QRegExpValidator, QValidator
from PyQt5.QtWidgets import QWidget
from lib.io.network import Network
from lib.misc.parse import Parse
from lib.thread.communicate import Communicate
from lib.thread.exploitthread import ExploitThread
from lib.misc.generator import Generator
from views.misc.messagebox import MessageBox
from views.misc.filedialog import FileDialog


class BruteForceView(QWidget):
    def __init__(self, parent):
        super(BruteForceView, self).__init__(parent)
        loadUi('./resources/ui/widgets/exploits/bruteforce.ui', self)
        self.__exploit = None
        self.__category = "bf"
        self.__parent = parent

        regex = QRegExp("\d{1,6}")
        self.__validator = QRegExpValidator(regex, self.lineEditPort)
        self.lineEditPort.setValidator(self.__validator)

        # Connect buttons
        self.pushButtonExploit.clicked.connect(self.pushButtonExploitClicked)
        self.pushButtonCancel.clicked.connect(self.pushButtonCancelClicked)
        self.toolButtonUsers.clicked.connect(self.toolButtonUsersClicked)
        self.toolButtonPasswords.clicked.connect(self.toolButtonPasswordsClicked)
        self.checkBoxVulnerable.stateChanged.connect(self.checkBoxVulnerableStateChanged)
        self.labelAuthor.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDate.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelTarget.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setWordWrap(True)

        self.labelCWE.setTextFormat(Qt.RichText)
        self.labelCWE.setTextInteractionFlags(Qt.TextBrowserInteraction)
        self.labelCWE.setOpenExternalLinks(True)

        self.labelReferences.setTextFormat(Qt.RichText)
        self.labelReferences.setTextInteractionFlags(Qt.TextBrowserInteraction)
        self.labelReferences.setOpenExternalLinks(True)

        # Set verticalLayout. It's resize the widget
        self.setLayout(self.verticalLayout)

        # Connect signal and thread
        self.__communicate = Communicate()
        self.__exploitThread = ExploitThread(self.__communicate)
        self.__communicate.finishExploit.connect(self.setResultExploit)

        # Button and progressbar
        self.setProgressBarState(0)
        self.pushButtonCancel.setEnabled(False)

        # Generator
        self.__generatorUsers = Generator()
        self.__generatorPasswords = Generator()

    def check(self):
        if Network.ping(self.__exploit.ip):
            if not self.isPort() or not self.lineEditUsers.text() or not self.lineEditPasswords.text():
                MessageBox.critical("Error", "You have to complete the information")
                return False
            else:
                users = self.lineEditUsers.text()
                lusers = self.lineEditLengthsUsers.text()
                passwords = self.lineEditPasswords.text()
                lpasswords = self.lineEditLengthsPasswords.text()
                if not self.__generatorUsers.check(users, lusers) or not self.__generatorPasswords.check(passwords, lpasswords):
                    MessageBox.critical("Error", "Each range need a length")
                    return False
                else:
                    return True
        else:
            MessageBox.critical("Error", "Destination Host Unreachable")
            return False

    def checkBoxVulnerableStateChanged(self):
        if self.checkBoxVulnerable.isChecked():
            self.__parent.addExploitSuccess(self.__exploit)
        else:
            self.__parent.removeExploitSuccess(self.__exploit)

    def getCategory(self):
        return self.__category

    def isPort(self):
        if self.lineEditPort.text():
            state = self.__validator.validate(self.lineEditPort.text(), 0)[0]
            return state == QValidator.Acceptable
        else:
            return False

    def pushButtonCancelClicked(self):
        self.__exploitThread.terminate()
        self.setProgressBarState(3)
        self.pushButtonCancel.setEnabled(False)
        self.pushButtonExploit.setEnabled(True)

    def pushButtonExploitClicked(self):
        if self.check():
            self.plainTextEditData.clear()
            try:
                self.setProgressBarState(2)
                self.pushButtonExploit.setEnabled(False)
                self.pushButtonCancel.setEnabled(True)

                if self.lineEditUsers.text():
                    if exists(self.lineEditUsers.text()):
                        users = Parse.getContentFromFile(self.lineEditUsers.text())
                    else:
                        users = self.__generatorUsers.create()
                else:
                    users = None

                if self.lineEditPasswords.text():

                    if exists(self.lineEditPasswords.text()):
                        passwords = Parse.getContentFromFile(self.lineEditPasswords.text())
                    else:
                        passwords = self.__generatorPasswords.create()
                else:
                    passwords = None

                if not users or not passwords:
                    MessageBox.critical("Error", "An error happened while items generation or read the dictionary.")
                    self.pushButtonCancelClicked()

                data = {"port": int(self.lineEditPort.text()), "users": users, "passwords": passwords}

                self.__exploitThread.setExploit(self.__exploit, data)
                self.__exploitThread.start()
            except Exception as e:
                MessageBox.critical("Error", str(e.args))

    def setCheckBoxVulnerableChecked(self, checked=True):
        if checked:
            self.checkBoxVulnerable.setCheckState(Qt.Checked)
        else:
            self.checkBoxVulnerable.setCheckState(Qt.Unchecked)

    def setExploit(self, exploit):
        self.__exploit = exploit
        self.labelNameExploit.setText(self.__exploit.name)
        self.labelAuthor.setText(self.__exploit.authors)
        self.labelDate.setText(self.__exploit.date)
        link = Parse.CWEToLink(self.__exploit.cwe)
        self.labelCWE.setText(link)
        self.labelTarget.setText(self.__exploit.target)
        self.labelReferences.setText(self.__exploit.references)
        self.labelDescription.setText(self.__exploit.description)
        self.plainTextEditData.appendPlainText("")
        default = self.__exploit.default()
        if default:
            try:
                self.lineEditPort.setText(default["port"])
                self.lineEditUsers.setText(default["users"])
                self.lineEditPasswords.setText(default["passwords"])

            except KeyError:
                pass

    def setProgressBarState(self, state):
        if state == 0:
            self.progressBar.hide()
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(0)
        elif state == 1:
            self.progressBar.setFormat("Waiting")
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(0)
        elif state == 2:
            self.progressBar.setFormat("Exploiting")
            self.progressBar.setRange(0, 0)
            self.progressBar.show()
        elif state == 3:
            self.progressBar.setFormat("Completed")
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(1)
            self.progressBar.show()

    def setResultExploit(self, result):
        if "Success" in result:
            self.__exploit.vulnerable = True
            self.setCheckBoxVulnerableChecked()

        self.plainTextEditData.appendPlainText(result)
        self.setProgressBarState(3)
        self.pushButtonExploit.setEnabled(True)

    def toolButtonUsersClicked(self):
        self.lineEditUsers.setText(FileDialog.getOpenFileName("txt"))

    def toolButtonPasswordsClicked(self):
        self.lineEditPasswords.setText(FileDialog.getOpenFileName("txt"))

