# Imports
from PyQt5.uic import loadUi
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QBrush, QColor
from PyQt5.QtWidgets import QWidget, QTreeWidgetItem, QComboBox
from controllers.stackedwidgetcontroller import StackedWidgetController
from views.misc.messagebox import MessageBox


class ExploitsView(QWidget):

    """
        This class is a view inherit from QWidget. This class managed all information related with the exploits function
    """

    def __init__(self, exploitsController, parent):
        super(ExploitsView, self).__init__(parent)
        self.__exploitsController = exploitsController
        self.__exploits = {}
        self.__exploitsSuccess = []
        loadUi('./resources/ui/widgets/tabs/exploits.ui', self)

        # Connect thing
        self.treeWidget.itemClicked.connect(lambda x: self.treeWidgetItemClicked(self.treeWidget.currentItem()))
        self.comboBoxRouter.currentIndexChanged.connect(self.comboBoxRouterChanged)
        self.pushButtonAutoCheck.clicked.connect(self.pushButtonAutoCheckClicked)

        # Add policy
        self.comboBoxRouter.InsertPolicy(QComboBox.InsertAlphabetically)

        # StackedWidget manages all relations between exploits and widgets
        self.__stackedWidgetController = StackedWidgetController(self)
        self.__stackedWidgetController.loadWidgets()
        self.horizontalLayout.addWidget(self.stackedWidget)

        # Set gridLayout. It's resize the widget
        self.setLayout(self.gridLayout)

        self.setEnabledItems(False)

    def addExploitSuccess(self, exploit):
        if exploit not in self.__exploitsSuccess:
            self.__exploitsSuccess.append(exploit)
            root = self.treeWidget.invisibleRootItem()
            for i in range(root.childCount()):
                item = root.child(i)
                if item.text(0) == exploit.name:
                    item.setForeground(0, QBrush(QColor(Qt.green)))

    def comboBoxRouterChanged(self):
        self.stackedWidget.setCurrentIndex(0)
        self.treeWidget.clear()
        self.__exploits = {}
        self.__exploitsSuccess = []
        self.__exploitsController.start(self.getRouterActive())

    def getExploitSuccess(self):
        return self.__exploitsSuccess

    def getRouterActive(self):
        router = self.comboBoxRouter.currentText()
        return "None" if "None" == router else router

    def pushButtonAutoCheckClicked(self):
        root = self.treeWidget.invisibleRootItem()
        success = 0
        fail = 0
        for i in range(root.childCount()):
            item = root.child(i)
            exploit = self.__exploits[item.text(0)]
            if exploit.check():
                exploit.setVulnerable = True
                self.addExploitSuccess(exploit)
                success += 1
                item.setForeground(0, QBrush(QColor(Qt.green)))
            else:
                fail += 1
                item.setForeground(0, QBrush(QColor(Qt.red)))

        self.labelCheck.setText("Result: {0} OK - {1} Fail".format(success, fail))

    def refreshExploits(self):
        self.__exploitsController.findRouters(True)
        self.__exploitsController.findExploits(self.getRouterActive(), True)
        self.comboBoxRouterChanged()

    def removeExploitSuccess(self, exploit):
        self.__exploitsSuccess.remove(exploit)
        root = self.treeWidget.invisibleRootItem()
        for i in range(root.childCount()):
            item = root.child(i)
            if item.text(0) == exploit.name:
                item.setForeground(0, QBrush(QColor(Qt.black)))

    def setComboBoxRouter(self, router):
        index = self.comboBoxRouter.findText(router)
        if index == -1:
            index = 0
        self.comboBoxRouter.setCurrentIndex(index)

    def setEnabledItems(self, state):
        self.comboBoxRouter.setEnabled(state)
        self.pushButtonAutoCheck.setEnabled(state)
        self.treeWidget.setEnabled(state)

    def setExploits(self, exploits):
        self.treeWidget.clear()
        for exploit in exploits:
            widget = self.__stackedWidgetController.getWidget(exploit.category)
            if widget:
                # Create a dict like {name:exploit}
                self.__exploits[exploit.name] = exploit
                item = QTreeWidgetItem(self.treeWidget.invisibleRootItem())
                item.setText(0, exploit.name)

                widget.setExploit(exploit)
                # join an exploit with her widget
                self.__stackedWidgetController.setExploitWidget(exploit.name, widget)
                self.stackedWidget.addWidget(widget)
                self.stackedWidget.setCurrentWidget(widget)

    def setStackedWidget(self, item):
        # Try to find a exploits related with this name
        name = item.text(0)
        exploit = None

        for key, value in self.__exploits.iteritems():
            if name == key:
                exploit = value
                break

        widget = self.__stackedWidgetController.getWidgetWithExploit(exploit.name)
        if widget:
            self.stackedWidget.setCurrentWidget(widget)

    def setItemsLoaded(self, names):
        self.setEnabledItems(True)
        if names:
            root = self.treeWidget.invisibleRootItem()
            for name in names:
                for i in range(root.childCount()):
                    item = root.child(i)
                    if item.text(0) == name:
                        widget = self.__stackedWidgetController.getWidgetWithExploit(name)
                        widget.setCheckBoxVulnerableChecked()
                        item.setForeground(0, QBrush(QColor(Qt.green)))

    def setModels(self, models):
        if models:
            for model in models:
                self.comboBoxModel.addItem(str(model))
        else:
            MessageBox.critical("Error", "We can not found models for this router. Try to choose other router.")

    def setRouters(self, routers, refresh):

        # Add new routers
        for router in sorted(routers):
            if self.comboBoxRouter.findText(str(router)) == -1:
                self.comboBoxRouter.addItem(str(router))

        if refresh:
            # New routers found
            new = set(sorted(routers))

            # Get all routers that appear on combobox
            combo = [self.comboBoxRouter.itemText(i) for i in range(1, self.comboBoxRouter.count())]

            # Delete routers that renamed
            delete = [x for x in combo if x not in new]
            for router in sorted(delete):
                index = self.comboBoxRouter.findText(str(router))
                if index != -1:
                    self.comboBoxRouter.removeItem(index)

            # It is necessary for sort items
            for router in sorted(new):
                index = self.comboBoxRouter.findText(str(router))
                if index != -1:
                    self.comboBoxRouter.removeItem(index)
                    self.comboBoxRouter.addItem(str(router))

    def treeWidgetItemClicked(self, item):
        self.stackedWidget.show()
        self.setStackedWidget(item)
