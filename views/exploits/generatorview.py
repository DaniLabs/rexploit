from re import compile, IGNORECASE
from PyQt5.uic import loadUi
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QWidget
from views.misc.messagebox import MessageBox
from lib.io.cwe import CWE


class GeneratorView(QWidget):
    def __init__(self, parent):
        super(GeneratorView, self).__init__(parent)
        loadUi('./resources/ui/exploits/generator.ui', self)
        self.__exploit = None
        self.__category = "generator"
        self.__cwe = CWE()

        # Connect buttons
        self.pushButtonGenerate.clicked.connect(self.pushButtonGenerateClicked)
        self.labelAuthor.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDate.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelTarget.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setWordWrap(True)

        self.labelCWE.setTextFormat(Qt.RichText)
        self.labelCWE.setTextInteractionFlags(Qt.TextBrowserInteraction)
        self.labelCWE.setOpenExternalLinks(True)

        self.labelReferences.setTextFormat(Qt.RichText)
        self.labelReferences.setTextInteractionFlags(Qt.TextBrowserInteraction)
        self.labelReferences.setOpenExternalLinks(True)

        # Set verticalLayout. It's resize the widget
        self.setLayout(self.verticalLayout)

    def check(self):
        mac = self.lineEditMAC.text()
        # Credits http://stackoverflow.com/questions/18782926/regex-to-match-mac-address-and-also-extract-its-values
        regex = compile(r'^([0-9A-F]{1,2})\:([0-9A-F]{1,2})\:([0-9A-F]{1,2})\:([0-9A-F]{1,2})\:([0-9A-F]{1,2})\:([0-9A-F]{1,2})$', IGNORECASE)
        result = regex.match(mac)

        if not result:
            MessageBox.critical("Error", "You have to set a MAC. Example: '00:11:22:33:44:55'")
            return False
        else:
            return True

    def getCategory(self):
        return self.__category

    def pushButtonGenerateClicked(self):
        if self.check():
            mac = self.lineEditMAC.text()
            try:
                data = self.__exploit.run(mac)
            except Exception as e:
                data = e.message

            self.labelOutput.setText(str(data))

    def setExploit(self, exploit):
        self.__exploit = exploit
        self.labelNameExploit.setText(self.__exploit.getName())
        self.labelAuthor.setText(self.__exploit.getAuthors())
        self.labelDate.setText(self.__exploit.getDate())
        self.labelTarget.setText(self.__exploit.getTarget())
        link = self.__cwe.get(self.__exploit.getCWE())
        self.labelCWE.setText(link)
        self.labelReferences.setText(self.__exploit.getReferences())
        self.labelDescription.setText(self.__exploit.getDescription())
        self.lineEditMAC.setText(self.__exploit.getMAC())
        self.labelOutput.setText("")
