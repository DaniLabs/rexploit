from PyQt5.uic import loadUi
from PyQt5.QtCore import Qt, QRegExp
from PyQt5.QtWidgets import QWidget
from PyQt5.QtGui import QRegExpValidator, QValidator
from views.misc.filedialog import FileDialog
from views.misc.messagebox import MessageBox
from lib.io.network import ping
from lib.thread.communicate import Communicate
from lib.thread.exploitthread import ExploitThread
from lib.io.cwe import CWE
from os import getcwd


class BruteForceView(QWidget):
    def __init__(self, parent):
        super(BruteForceView, self).__init__(parent)
        loadUi('./resources/ui/exploits/bruteforce.ui', self)
        self.__exploit = None
        self.__cwe = CWE()
        self.__category = "bf"

        regex = QRegExp("\d{1,6}")
        self.__validator = QRegExpValidator(regex, self.lineEditPort)
        self.lineEditPort.setValidator(self.__validator)

        # Connect buttons
        self.pushButtonExploit.clicked.connect(self.pushButtonExploitClicked)
        self.labelAuthor.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDate.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelTarget.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setWordWrap(True)
        self.toolButtonUsers.clicked.connect(self.toolButtonUsersClicked)
        self.toolButtonPasswords.clicked.connect(self.toolButtonPasswordsClicked)

        self.labelCWE.setTextFormat(Qt.RichText)
        self.labelCWE.setTextInteractionFlags(Qt.TextBrowserInteraction)
        self.labelCWE.setOpenExternalLinks(True)

        self.labelReferences.setTextFormat(Qt.RichText)
        self.labelReferences.setTextInteractionFlags(Qt.TextBrowserInteraction)
        self.labelReferences.setOpenExternalLinks(True)

        # Set verticalLayout. It's resize the widget
        self.setLayout(self.verticalLayout)

        # Connect signal
        self.__communicate = Communicate()
        self.__exploitThread = ExploitThread(self.__communicate)

        self.__communicate.finishExploit.connect(self.setResultExploit)

    def check(self):
        if ping(self.__exploit.getIP()):
            if not self.isPort() or not self.lineEditUsers.text() or not self.lineEditPasswords.text():
                MessageBox.critical("Error", "You have to complete the information")
                return False
            else:
                return True
        else:
            MessageBox.critical("Error", "Destination Host Unreachable")
            return False

    def getCategory(self):
        return self.__category

    def isPort(self):
        if self.lineEditPort.text():
            state = self.__validator.validate(self.lineEditPort.text(), 0)[0]
            return state == QValidator.Acceptable
        else:
            return False

    def pushButtonExploitClicked(self):
        if self.check():
            self.plainTextEditData.clear()
            try:
                if self.__exploitThread.isRunning():
                    MessageBox.critical("Error", "A attack is running")
                else:
                    data = self.sanitizeOutput()
                    self.__exploitThread.setExploit(self.__exploit, data)
                    self.__exploitThread.start()
            except Exception as e:
                MessageBox.critical("Error", str(e.args))

    def sanitizeOutput(self):
        out = {"port": int(self.lineEditPort.text()),
               "users": self.lineEditUsers.text(),
               "passwords": self.lineEditPasswords.text()}

        return out

    def setExploit(self, exploit):
        self.__exploit = exploit
        self.labelNameExploit.setText(self.__exploit.getName())
        self.labelAuthor.setText(self.__exploit.getAuthors())
        self.labelDate.setText(self.__exploit.getDate())
        link = self.__cwe.get(self.__exploit.getCWE())
        self.labelCWE.setText(link)
        self.labelTarget.setText(self.__exploit.getTarget())
        self.labelReferences.setText(self.__exploit.getReferences())
        self.labelDescription.setText(self.__exploit.getDescription())
        self.plainTextEditData.appendPlainText("")
        default = self.__exploit.default()
        if default:
            self.lineEditPort.setText(default["port"])
            if default["users"].startswith("/"):
                default["users"] = default["users"][1:]

            if default["passwords"].startswith("/"):
                default["passwords"] = default["passwords"][1:]

            self.lineEditUsers.setText("{0}/resources/wordlist/{1}".format(getcwd(), default["users"]))
            self.lineEditPasswords.setText("{0}/resources/wordlist/{1}".format(getcwd(), default["passwords"]))

    def setResultExploit(self, result):
        self.plainTextEditData.appendPlainText(result)

    def toolButtonUsersClicked(self):
        self.lineEditUsers.setText(FileDialog.getOpenFileName("txt"))

    def toolButtonPasswordsClicked(self):
        self.lineEditPasswords.setText(FileDialog.getOpenFileName("txt"))
