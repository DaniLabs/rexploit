from PyQt5.uic import loadUi

from PyQt5.QtCore import Qt, QRegExp
from PyQt5.QtWidgets import QWidget
from PyQt5.QtGui import QRegExpValidator, QValidator
from views.misc.filedialog import FileDialog
from views.misc.messagebox import MessageBox

from os import getcwd


class BruteForceView(QWidget):
    def __init__(self, parent):
        super(BruteForceView, self).__init__(parent)
        loadUi('./resources/ui/exploits/bruteforce.ui', self)
        self.__exploit = None
        self.__category = "bf"

        regex = QRegExp("\d{1,6}")
        self.__validator = QRegExpValidator(regex, self.lineEditPort)
        self.lineEditPort.setValidator(self.__validator)

        # Connect buttons
        self.pushButtonExploit.clicked.connect(self.pushButtonExploitClicked)
        self.pushButtonCheck.clicked.connect(self.pushButtonCheckClicked)
        self.labelAuthor.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDate.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelCWE.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelTarget.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setWordWrap(True)
        self.toolButtonUsers.clicked.connect(self.toolButtonUsersClicked)
        self.toolButtonPasswords.clicked.connect(self.toolButtonPasswordsClicked)

        self.labelReferences.setTextFormat(Qt.RichText)
        self.labelReferences.setTextInteractionFlags(Qt.TextBrowserInteraction)
        self.labelReferences.setOpenExternalLinks(True)

        # Set verticalLayout. It's resize the widget
        self.setLayout(self.verticalLayout)

    def check(self):
        if not self.isPort() or not self.lineEditUsers.text() or not self.lineEditPasswords.text():
            MessageBox.critical("Error", "You have to complete the information")
            return False
        else:
            return True

    def getCategory(self):
        return self.__category

    def isPort(self):
        if self.lineEditPort.text():
            state = self.__validator.validate(self.lineEditPort.text(), 0)[0]
            return state == QValidator.Acceptable
        else:
            return False

    def pushButtonCheckClicked(self):
        if self.__exploit.check():
            self.__exploit.setVulnerable()
            self.checkBoxVulnerable.setCheckState(Qt.Checked)
        else:
            self.plainTextEditData.appendPlainText("")
            self.plainTextEditData.appendPlainText("Error. The target is not vulnerable")

    def pushButtonExploitClicked(self):
        if self.check():
            self.plainTextEditData.clear()
            try:
                data = self.sanitizeOutput()
                result = self.__exploit.run(data)
                self.plainTextEditData.appendPlainText(result)
                self.__exploit.setVulnerable()
                self.checkBoxVulnerable.setCheckState(Qt.Checked)
            except Exception as e:
                MessageBox.critical("Error", str(e.args))

    def sanitizeOutput(self):
        out = {
            "port": int(self.lineEditPort.text()),
            "users": self.lineEditUsers.text(),
            "passwords": self.lineEditPasswords.text()
        }

        return out

    def setExploit(self, exploit):
        self.__exploit = exploit
        self.labelNameExploit.setText(self.__exploit.getName())
        self.labelAuthor.setText(self.__exploit.getAuthors())
        self.labelDate.setText(self.__exploit.getDate())
        self.labelCWE.setText(self.__exploit.getCWE())
        self.labelTarget.setText(self.__exploit.getTarget())
        self.labelReferences.setText(self.__exploit.getReferences())
        self.labelDescription.setText(self.__exploit.getDescription())
        self.plainTextEditData.appendPlainText("")
        default = self.__exploit.default()
        if default:
            self.lineEditPort.setText(default["port"])
            if default["users"].startswith("/"):
                default["users"] = default["users"][1:]

            if default["passwords"].startswith("/"):
                default["passwords"] = default["passwords"][1:]

            self.lineEditUsers.setText("{0}/resources/wordlist/{1}".format(getcwd(), default["users"]))
            self.lineEditPasswords.setText("{0}/resources/wordlist/{1}".format(getcwd(), default["passwords"]))

    def toolButtonUsersClicked(self):
        self.lineEditUsers.setText(FileDialog.getOpenFileName("txt"))

    def toolButtonPasswordsClicked(self):
        self.lineEditPasswords.setText(FileDialog.getOpenFileName("txt"))
