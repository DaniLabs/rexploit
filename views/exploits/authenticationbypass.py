from PyQt5.uic import loadUi

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QWidget

from views.misc.messagebox import MessageBox


class AuthenticationBypassView(QWidget):
    def __init__(self, parent):
        super(AuthenticationBypassView, self).__init__(parent)
        loadUi('./resources/ui/exploits/authenticationbypass.ui', self)
        self.__exploit = None
        self.__category = "bypass"

        # Connect buttons
        self.pushButtonExploit.clicked.connect(self.pushButtonExploitClicked)
        self.pushButtonCheck.clicked.connect(self.pushButtonCheckClicked)
        self.labelAuthor.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDate.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelCWE.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelTarget.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setWordWrap(True)

        self.labelReferences.setTextFormat(Qt.RichText)
        self.labelReferences.setTextInteractionFlags(Qt.TextBrowserInteraction)
        self.labelReferences.setOpenExternalLinks(True)

        # Set verticalLayout. It's resize the widget
        self.setLayout(self.verticalLayout)

    def check(self):
        if not self.lineEditData.text():
            MessageBox.critical("Error", "You have to complete the data box")
            return False
        else:
            return True

    def getCategory(self):
        return self.__category

    def pushButtonCheckClicked(self):
        if self.__exploit.check():
            self.__exploit.isVulnerable()
            self.checkBoxVulnerable.setCheckState(Qt.Checked)
        else:
            pass

    def pushButtonExploitClicked(self):
        if self.check():
            data = self.lineEditData.text()
            self.plainTextEditData.clear()
            try:
                data = self.sanitizeOutput(data)
                result = self.__exploit.run(data)
                self.plainTextEditData.appendPlainText(result)
            except Exception as e:
                MessageBox.critical("Error", str(e.args))

    @staticmethod
    def sanitizeOutput(data):
        out = {}
        data = data.replace(" ", "")
        c = data.split(",")
        for a in c:
            d = a.split(":")
            out[d[0]] = d[1]

        return out

    def setExploit(self, exploit):
        self.__exploit = exploit
        self.labelNameExploit.setText(self.__exploit.getName())
        self.labelAuthor.setText(self.__exploit.getAuthors())
        self.labelDate.setText(self.__exploit.getDate())
        self.labelCWE.setText(self.__exploit.getCWE())
        self.labelTarget.setText(self.__exploit.getTarget())
        self.labelReferences.setText(self.__exploit.getReferences())
        self.labelDescription.setText(self.__exploit.getDescription())
        self.plainTextEditData.appendPlainText("")
        default = self.__exploit.default()
        if default:
            default = str(default).replace("'", "").replace("{", "").replace("}", "")
            self.lineEditData.setText(default)
