from PyQt5.uic import loadUi
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QWidget
from views.misc.messagebox import MessageBox
from lib.io.parse import sanatizeJSONInput, sanatizeJSONOutput
from lib.io.network import ping
from lib.io.cwe import CWE


class BackdoorView(QWidget):
    def __init__(self, parent):
        super(BackdoorView, self).__init__(parent)
        loadUi('./resources/ui/exploits/backdoor.ui', self)
        self.__exploit = None
        self.__category = "backdoor"
        self.__cwe = CWE()

        # Connect buttons
        self.pushButtonExploit.clicked.connect(self.pushButtonExploitClicked)
        self.pushButtonCheck.clicked.connect(self.pushButtonCheckClicked)
        self.labelAuthor.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDate.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelTarget.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setWordWrap(True)

        self.labelCWE.setTextFormat(Qt.RichText)
        self.labelCWE.setTextInteractionFlags(Qt.TextBrowserInteraction)
        self.labelCWE.setOpenExternalLinks(True)

        self.labelReferences.setTextFormat(Qt.RichText)
        self.labelReferences.setTextInteractionFlags(Qt.TextBrowserInteraction)
        self.labelReferences.setOpenExternalLinks(True)

        # Set verticalLayout. It's resize the widget
        self.setLayout(self.verticalLayout)

    def check(self):
        if ping(self.__exploit.getIP()):
            if self.lineEditCommand.text():
                return True
            else:
                MessageBox.critical("Error", "You must write a command.")
                return False
        else:
            MessageBox.critical("Error", "Destination Host Unreachable")
            return False

    def getCategory(self):
        return self.__category

    def pushButtonCheckClicked(self):
        if self.__exploit.check():
            self.__exploit.setVulnerable()
            self.setCheckBoxVulnerableChecked()
        else:
            self.plainTextEditData.appendPlainText("")
            self.plainTextEditData.appendPlainText("Error. The target is not vulnerable")

    def pushButtonExploitClicked(self):
        if self.check():
            self.plainTextEditData.clear()
            try:
                data = sanatizeJSONOutput(self.lineEditCommand.text())
                result = self.__exploit.run(data)
                self.plainTextEditData.appendPlainText(result)
                if self.__exploit.setVulnerable():
                    self.setCheckBoxVulnerableChecked()
            except Exception as e:
                MessageBox.critical("Error", str(e.message))

    def setCheckBoxVulnerableChecked(self, checked=True):
        if checked:
            self.checkBoxVulnerable.setCheckState(Qt.Checked)
        else:
            self.checkBoxVulnerable.setCheckState(Qt.Unchecked)

    def setExploit(self, exploit):
        self.__exploit = exploit
        self.labelNameExploit.setText(self.__exploit.getName())
        self.labelAuthor.setText(self.__exploit.getAuthors())
        self.labelDate.setText(self.__exploit.getDate())
        link = self.__cwe.get(self.__exploit.getCWE())
        self.labelCWE.setText(link)
        self.labelTarget.setText(self.__exploit.getTarget())
        self.labelReferences.setText(self.__exploit.getReferences())
        self.labelDescription.setText(self.__exploit.getDescription())
        self.plainTextEditData.appendPlainText("")
        default = self.__exploit.default()
        if default:
            default = sanatizeJSONInput(default)
            self.lineEditCommand.setText(default)
