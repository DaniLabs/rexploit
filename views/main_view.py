from PyQt4 import QtGui

from gen.ui_main import UiMainWindow


class MainView(QtGui.QMainWindow):
    def __init__(self, main_controller):
        super(MainView, self).__init__()
        self.main_controller = main_controller
        self.ui = None
        self.widgets_actives = []
        self.widget_active = None
        self.build_ui()

    def build_ui(self):
        self.ui = UiMainWindow()
        self.ui.setup_ui(self)
        self.ui.treeWidget.itemClicked.connect(lambda: self.printer(self.ui.treeWidget.currentItem()))
        self.ui.actionHome.triggered.connect(self.__action_home)
        self.ui.actionNew_project.triggered.connect(self.__action_new_project)
        self.ui.actionOpen_project.triggered.connect(self.__action_open_project)
        self.ui.actionSave.triggered.connect(self.__action_save)
        self.ui.actionVulnerabilities.triggered.connect(self.__action_vulnerabilities)
        self.ui.actionScan.triggered.connect(self.__action_scan)
        self.ui.actionSettings.triggered.connect(self.__action_settings)
        self.ui.actionAbout.triggered.connect(self.__action_about)

    def printer(self, item):
        print item.text(0)

    def set_message_status(self, message):
        self.ui.statusbar.showMessage(message)

    def load_central_widget(self, widget):
        if not self.widget_active:
            self.widget_active = widget
            self.ui.verticalLayout.addWidget(self.widget_active)
            self.ui.frame.setLayout(self.ui.verticalLayout)
        elif widget is self.widget_active:
            pass
        elif widget is not self.widget_active:
            self.ui.verticalLayout.removeWidget(self.widget_active)
            self.widget_active.hide()
            self.widget_active = widget
            self.widget_active.show()
            self.ui.verticalLayout.addWidget(self.widget_active)
            self.ui.frame.setLayout(self.ui.verticalLayout)

    def __action_home(self):
        self.main_controller.action_home()

    def __action_new_project(self):
        self.main_controller.action_new_project()

    def __action_open_project(self):
        self.main_controller.action_open_project()

    def __action_save(self):
        self.main_controller.action_save()

    def __action_vulnerabilities(self):
        self.main_controller.action_vulnerabilities()

    def __action_scan(self):
        self.main_controller.action_scan()

    def __action_settings(self):
        self.main_controller.action_settings()

    def __action_about(self):
        self.main_controller.action_about()
    # def closeEvent(self, event):
    #     result = QtGui.QMessageBox.question(self,
    #                                         "Confirm Exit",
    #                                         "Are you sure you want to exit ?",
    #                                         QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
    #     event.ignore()
    #     if result == QtGui.QMessageBox.Yes:
    #         event.accept()
