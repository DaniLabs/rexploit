from PyQt4.QtCore import Qt
from PyQt4.QtGui import QWidget, QIcon, QPixmap, QTableWidgetItem

from gen.ui_scan import UiNmapScan
from misc.messagebox import MessageBox


class ScanView(QWidget):
    def __init__(self, scan_controller):
        super(ScanView, self).__init__( )
        self.scan_controller = scan_controller
        self.ui = None
        self.build_ui()

    def build_ui(self):
        self.ui = UiNmapScan()
        self.ui.setup_ui()
        self.ui.pushButton_scan.clicked.connect(self.__start_scan)
        t = self.scan_controller.get_thread()
        self.connect(t, t.signal, self.set_items)
        self.message_status("Waiting to start")

    def get_ui(self):
        return self.ui

    def set_items(self, targets, load=False):
        self.ui.tableWidget.setRowCount(len(targets))
        for row, target in enumerate(targets):
            print row, target.protocol, target.port, target.name, target.state, \
                "%s %s" % (target.product, target.version),\
                target.extra_info

            self.__add_item(row,
                            target.protocol,
                            target.port,
                            target.name,
                            target.state,
                            "%s %s" % (target.product, target.version),
                            target.extra_info)

        self.ui.tableWidget.resizeColumnsToContents()
        self.ui.tableWidget.resizeRowsToContents()
        self.ui.tableWidget.setSortingEnabled(False)

        if load:
            self.message_status("Load completed. Found %s ports" % len(targets))
        else:
            self.message_status("Scan completed. Found %s ports" % len(targets))

    def get_row_col(self):
        return self.ui.tableWidget.rowCount(), self.ui.tableWidget.columnCount()

    def get_item(self, row, col):
        return self.ui.tableWidget.item(row, col).text()

    def message_status(self, text):
        self.ui.label_status.setText(text)

    @staticmethod
    def error():
        m = MessageBox()
        message = "IP or ports not found"
        m.type_critical("Error", message)

    @staticmethod
    def info():
        m = MessageBox()
        m.type_info("Information", "May be this action can be take some minutes")

    def __start_scan(self):
        self.scan_controller.start_scan(str(self.ui.lineEdit_ports.text()))

    def __add_item(self, row, protocol, port, name, state, product, extra_info):
        icon = QIcon()

        if state in ["filtered", "closed"]:
            icon.addPixmap(QPixmap("./views/resources/icons/no.png"), QIcon.Normal, QIcon.Off)
        else:
            icon.addPixmap(QPixmap("./views/resources/icons/yes.png"), QIcon.Normal, QIcon.Off)

        self.ui.tableWidget.setVerticalHeaderItem(row, QTableWidgetItem(icon, ""))

        item = QTableWidgetItem(protocol)
        item.setFlags(Qt.ItemIsEnabled)
        self.ui.tableWidget.setItem(row, 0, item)

        item = QTableWidgetItem(str(port))
        item.setFlags(Qt.ItemIsEnabled)
        self.ui.tableWidget.setItem(row, 1, item)

        item = QTableWidgetItem(name)
        item.setFlags(Qt.ItemIsEnabled)
        self.ui.tableWidget.setItem(row, 2, item)

        item = QTableWidgetItem(state)
        item.setFlags(Qt.ItemIsEnabled)
        self.ui.tableWidget.setItem(row, 3, item)

        item = QTableWidgetItem(product)
        item.setFlags(Qt.ItemIsEnabled)
        self.ui.tableWidget.setItem(row, 4, item)

        item = QTableWidgetItem(extra_info)
        item.setFlags(Qt.ItemIsEnabled)
        self.ui.tableWidget.setItem(row, 5, item)
