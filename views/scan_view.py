from PyQt4.QtCore import Qt
from PyQt4.QtGui import QWidget, QIcon, QPixmap, QTableWidgetItem

from gen.ui_scan import UiNmapScan
from misc.messagebox import MessageBox


class ScanView(QWidget):
    def __init__(self, scan_controller):
        super(ScanView, self).__init__()
        self.scan_controller = scan_controller
        self.ui = None
        self.build_ui()

    def build_ui(self):
        self.ui = UiNmapScan()
        self.ui.setup_ui()
        self.ui.pushButton_scan.clicked.connect(self.__start_scan)
        self.ui.progressBar.hide()
        #TODO Falta hacer expresion regular que solo admita del 21 en adelante y seguidas de comas
        # regex = QRegExp("\d[{1,5}\-\d{1,5}]?\d[{1,5}\,\d{1,5}*")
        # self.validator = QRegExpValidator(regex, self.ui.lineEdit_ports)
        # self.ui.lineEdit_ports.setValidator(self.validator)
        t = self.scan_controller.get_thread()
        self.connect(t, t.signal, self.set_items)
        self.message_status("")

    def get_ui(self):
        return self.ui

    def get_filters(self):
        filters = []
        if self.ui.checkBox_closed.isChecked():
            filters.append("closed")
        if self.ui.checkBox_filtered.isChecked():
            filters.append("filtered")
        if self.ui.checkBox_open.isChecked():
            filters.append("open")

        return filters

    def new_scan(self):
        self.ui.tableWidget.setRowCount(0)
        self.ui.checkBox_open.setChecked(False)
        self.ui.checkBox_filtered.setChecked(False)
        self.ui.checkBox_closed.setChecked(False)
        self.ui.lineEdit_ports.setText("")
        self.message_status("")
        self.progress_bar_state(0)

    def prepare_view(self):
        self.info()
        self.message_status("Scanning")
        self.progress_bar_state(2)
        self.set_disable(True)
        self.ui.tableWidget.setRowCount(0)

    def set_disable(self, bool):
        self.ui.checkBox_open.setDisabled(bool)
        self.ui.checkBox_filtered.setDisabled(bool)
        self.ui.checkBox_closed.setDisabled(bool)
        self.ui.lineEdit_ports.setDisabled(bool)

    def set_items(self, targets):
        filters = self.get_filters()

        targets = filter(lambda t: t.state in filters, targets)
        self.ui.tableWidget.setRowCount(len(targets))
        for row, target in enumerate(targets):
            print row, target.protocol, target.port, target.name, target.state, \
            "%s %s" % (target.product, target.version),\
            target.extra_info
            if target.state in filters:
                print "add: " + target.state
                self.__add_item(row,
                                target.protocol,
                                target.port,
                                target.name,
                                target.state,
                                "%s %s" % (target.product, target.version),
                                target.extra_info)
            else:
                pass
        self.ui.tableWidget.resizeColumnsToContents()
        self.ui.tableWidget.resizeRowsToContents()
        self.ui.tableWidget.setSortingEnabled(False)
        self.set_disable(False)
        self.message_status("Found %s port(s)" % len(targets))
        self.progress_bar_state(3)

    def load_items(self, targets):
        if targets:
            self.ui.tableWidget.setRowCount(len(targets))
            for row, target in enumerate(targets):
                    self.__add_item(row,
                                    target.protocol,
                                    target.port,
                                    target.name,
                                    target.state,
                                    "%s %s" % (target.product, target.version),
                                    target.extra_info)
            self.ui.tableWidget.resizeColumnsToContents()
            self.ui.tableWidget.resizeRowsToContents()
            self.ui.tableWidget.setSortingEnabled(False)
            self.set_disable(False)
            self.message_status("Found %s port(s)" % len(targets))
            self.progress_bar_state(3)
        else:
            pass

    def get_row_col(self):
        return self.ui.tableWidget.rowCount(), self.ui.tableWidget.columnCount()

    def get_item(self, row, col):
        return str(self.ui.tableWidget.item(row, col).text())

    def message_status(self, text):
        self.ui.label_status.setText(text)

    def progress_bar_state(self, state):
        if state == 0:
            self.ui.progressBar.hide()
            self.ui.progressBar.setRange(0, 1)
            self.ui.progressBar.setValue(0)
        elif state == 1:
            self.ui.progressBar.setFormat("Waiting")
            self.ui.progressBar.setRange(0, 1)
            self.ui.progressBar.setValue(0)
        elif state == 2:
            self.ui.progressBar.setFormat("Scanning")
            self.ui.progressBar.setRange(0,0)
            self.ui.progressBar.show()
        elif state == 3:
            self.ui.progressBar.setFormat("Completed")
            self.ui.progressBar.setRange(0, 1)
            self.ui.progressBar.setValue(1)
            self.ui.progressBar.show()
        elif state == 4:
            self.ui.progressBar.setFormat("Error")
            self.ui.progressBar.setRange(0, 1)
            self.ui.progressBar.setValue(0)
            self.ui.progressBar.show()


    @staticmethod
    def error(message):
        m = MessageBox()
        m.type_critical("Error", message)

    @staticmethod
    def info():
        m = MessageBox()
        m.type_info("Information", "May be this action can be take some minutes")

    def __start_scan(self):
        #state, pos = self.validator.validate(self.ui.lineEdit_ports.text(), 0)
        #return state == QValidator.Acceptable
        self.scan_controller.start_scan(str(self.ui.lineEdit_ports.text()))

    def __add_item(self, row, protocol, port, name, state, product, extra_info):
        icon = QIcon()

        if state in ["filtered", "closed"]:
            icon.addPixmap(QPixmap("./views/resources/icons/no.png"), QIcon.Normal, QIcon.Off)
        else:
            icon.addPixmap(QPixmap("./views/resources/icons/yes.png"), QIcon.Normal, QIcon.Off)

        self.ui.tableWidget.setVerticalHeaderItem(row, QTableWidgetItem(icon, ""))

        item = QTableWidgetItem(protocol)
        item.setFlags(Qt.ItemIsEnabled)
        self.ui.tableWidget.setItem(row, 0, item)

        item = QTableWidgetItem(str(port))
        item.setFlags(Qt.ItemIsEnabled)
        self.ui.tableWidget.setItem(row, 1, item)

        item = QTableWidgetItem(name)
        item.setFlags(Qt.ItemIsEnabled)
        self.ui.tableWidget.setItem(row, 2, item)

        item = QTableWidgetItem(state)
        item.setFlags(Qt.ItemIsEnabled)
        self.ui.tableWidget.setItem(row, 3, item)

        item = QTableWidgetItem(product)
        item.setFlags(Qt.ItemIsEnabled)
        self.ui.tableWidget.setItem(row, 4, item)

        item = QTableWidgetItem(extra_info)
        item.setFlags(Qt.ItemIsEnabled)
        self.ui.tableWidget.setItem(row, 5, item)
