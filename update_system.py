# Imports
from json import dump
from os import listdir, walk, getcwd
from os.path import splitext, join
from hashlib import md5

# This file create a server.json for you custom update server

# Do not change this var
json_file = "server.json"

# Functions


def update():
    """
    Create a json local named 'server.json'
    """

    fileJSON = writeJSON("auxiliary")
    fileJSON.update(writeJSON("generic"))
    fileJSON.update(writeJSON("routers"))

    checksum = "{0}{1}{2}".format(fileJSON['generic']['id'], fileJSON['auxiliary']['id'], fileJSON['routers']['id'])

    # Checksum from modules folder
    checksum = md5(checksum.encode()).hexdigest()
    data = {"modules": fileJSON, "id": checksum}

    with open(json_file, "w+") as outfile:
        dump(data, outfile, indent=4)


def filesToJSON(path, pathUrl):
    """
    Write a JSON about a file
    :param path: the path
    :param pathUrl: the string that will appear on value of key 'path'
    :return: a structure JSON
    """
    out, checksumPath = [], ""
    folder = path.split("/")[-2]

    if path.split("/")[-2] in pathUrl:
        pathUrl = ""

    files = [x for x in [[join(path + splitext(f)[0] + splitext(f)[1]), splitext(f)[0]]
                         for f in listdir(path)
                         if f.endswith(".py") and not f.startswith("__")] if x]

    for f in files:
        path, name = f
        checksumFile = md5(open(path, 'rb').read()).hexdigest()

        data = {"name": "{}".format(name),
                "id": checksumFile,
                "path": join("modules", pathUrl, folder + "/" + "{0}.py".format(name))}

        # Create a checksum of all checksum's
        checksumPath += checksumFile
        out.append(data)

    folder = {"folder": folder,
              "id": md5(checksumPath.encode()).hexdigest(),
              "files": out}

    return folder


def writeJSON(folder):
    """
    Write a JSON about a folder and it can be 'routers', 'auxiliary' or 'generic
    :param folder: 'routers', 'auxiliary' or 'generic
    :return: a structure JSON like {'namefolder': data'}
    """
    path = join(getcwd(), "modules", folder + "/")
    out, data = [], {}

    if folder == "routers":
        checksum = ""
        for root, dirs, files in walk(path, topdown=False):
            for d in dirs:
                data = filesToJSON(join(path, d + "/"), folder + "/")
                checksum += data['id']
                out.append(data)

        data = {"folder": folder,
                "id": md5(checksum.encode()).hexdigest(),
                "files": out}

    elif folder in ['auxiliary', 'generic']:
        data = filesToJSON(path, folder + "/")
    else:
        pass

    return {folder: data}


def main():
    update()

if __name__ == "__main__":
    main()
