# Imports
from importlib import import_module
from os import listdir
from os.path import splitext, isdir, join, dirname
from sys import modules
from rexploit.views.aux.messagebox import MessageBox
from rexploit.views.widget.tab.exploitsview import ExploitsView


class ExploitsController(object):

    """
        This class is a controller that manages the 'Report View' and all action that are related with
        create a PDF.
    """

    def __init__(self, parent):
        """Initialize the controller object and all attributes that it needs"""
        self.__view = ExploitsView(self, parent)
        self.__projectFile = None
        self.__IP = None
        self.__MAC = None
        self.findRouters()
        self.findExploits("None")

    def importExploits(self, files, route, refresh=False):
        """
        Import all exploits that we found and want to import.
        :param files: the files that will import
        :param route: generic or specific
        :param refresh: True if we want to re-import, False otherwise
        :return: exploits imported
        """
        exploits = []
        try:
            for exploit in files:
                name = 'rexploit.modules.{0}.{1}'.format(route, exploit)

                if refresh:
                    try:
                        modules.pop(name)
                    except KeyError:
                        break

                # Reload all modules
                if name in modules.keys():
                    # Get a module
                    e = modules.get(name)
                else:
                    # Import a new module
                    e = import_module('.modules.{0}.{1}'.format(route, exploit), 'rexploit')

                # Create an exploit object and we set IP and MAC
                e = e.Exploit()
                e.ip = self.__IP
                e.mac = self.__MAC

                exploits.append(e)
            return exploits
        except ImportError:
            return exploits

    def findExploits(self, router, refresh=False):
        """
        Find all exploits that we want to import
        :param router: generic or specific
        :param refresh: True if we want to re-import, False otherwise
        :return: exploits found (generic + specific)
        """
        base = dirname(__file__.split('rexploit')[0])

        # Generic exploits
        files = filter(lambda x: x,
                       [splitext(f)[0]
                        for f in listdir(join(base, "rexploit", "modules", "generic"))
                        if f.endswith(".py") and not f.startswith("__")])

        generic = self.importExploits(files, 'generic', refresh)

        if router == "None":
            return generic
        else:
            # Specific exploits
            files = filter(lambda x: x,
                           [splitext(f)[0]
                            for f in listdir(join(base, "rexploit", "modules", "routers", "{0}".format(str(router).lower())))
                            if f.endswith(".py") and not f.startswith("__")])

            specific = self.importExploits(files, 'routers.{0}'.format(str(router).lower()), refresh)

            return generic + specific
        
    def findRouters(self, refresh=False):
        """
        Find all routers and each router is a package (folder)
        :param refresh: True if we want to re-import, False otherwise
        :return: None
        """
        base = dirname(__file__.split('rexploit')[0])
        routers = [f.capitalize() for f in listdir(join(base, "rexploit", "modules", "routers/"))
                   if isdir(join(base, "modules", "routers", f, "/")) and not f.startswith("__")]
        self.__view.setRouters(routers, refresh)

    def getWidget(self):
        """
        Get the widget view
        :return: the widget
        """
        return self.__view

    @property
    def projectFile(self):
        """
        Get a project file.
        :return: A project file
        """
        return self.__projectFile

    @projectFile.setter
    def projectFile(self, projectFile):
        """
        Set a project file object
        :param projectFile: a project file object
        :return: None
        """
        self.__projectFile = projectFile
        self.__IP = str(self.__projectFile.readValue("Information", "IP"))
        self.__MAC = str(self.__projectFile.readValue("Information", "MAC"))
        self.__view.setComboBoxRouter(str(self.__projectFile.readValue("Information", "ROUTER")))

        # Get all exploits
        items = self.__projectFile.getSections("IExploit")

        exploits = []
        for section in items:
            name = section[0][1]
            exploits.append(name)

        self.__view.setItemsLoaded(exploits)

    def refreshExploits(self):
        """
        This function is executed when refresh button is pushed
        :return:
        """
        self.__view.refreshExploits()

    def save(self):
        """
        Save all items on a file. Firstly we get all items that appear on table and we save it.
        :return: True if it was saved successfully, False otherwise.
        """

        self.__projectFile.write("Information", "Router", self.__view.getRouterActive())

        exploits = self.__view.getExploitSuccess()
        if exploits:
            for i, exploit in enumerate(exploits):
                section = "Exploit_%s" % i
                try:
                    self.__projectFile.write(section, "Name", exploit.name)
                    self.__projectFile.write(section, "Authors", exploit.authors)
                    self.__projectFile.write(section, "Description", exploit.description)
                    self.__projectFile.write(section, "CWE", exploit.cwe)
                    self.__projectFile.write(section, "Targets", exploit.target)
                    self.__projectFile.write(section, "References", exploit.references)
                except Exception as e:
                    MessageBox.critical("Error", e.message)
                    return False

        return True

    def start(self, router):
        """
        This function is executed when combobox router changed.
        :param router: the router that we select
        :return: None
        """
        exploits = self.findExploits(router)
        if exploits:
            self.__view.show()
            self.__view.setExploits(exploits)
        else:
            MessageBox.critical("Error", "We can not found exploits for this router")
