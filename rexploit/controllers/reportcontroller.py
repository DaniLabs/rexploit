# Imports
from rexploit.lib.io.pdf import PDF
from rexploit.views.dialog.reportview import ReportView

from rexploit.lib.misc.parse import Parse


class ReportController(object):
    
    """
        This class is a controller that manages the 'Report View' and all action that are related with 
        create a PDF.
    """
    
    def __init__(self):
        """Initialize the controller object and all attributes that it needs"""
        self.__projectFile = None
        self.__view = ReportView(self)

    @property
    def projectFile(self):
        """
        Get a project file.
        :return: A project file
        """
        return self.__projectFile

    @projectFile.setter
    def projectFile(self, projectFile):
        """
        Set a project file object
        :param projectFile: a project file object
        :return: None
        """
        self.__projectFile = projectFile

    def save(self, location, comment=None):
        """
        Create a PDF and write the information on it.
        :param location: where we save the PDF
        :param comment: the comment
        :return: None
        """
        pdf = PDF()
        pdf.create()

        self.writeGeneralInformation(pdf)
        self.writeExploitAvailable(pdf)
        self.writePortsServices(pdf)
        self.writeComment(pdf, comment)

        path = location + "/" + self.__projectFile.readValue("Information", "Name")

        pdf.save(path)

    def show(self):
        """
        Show 'Report View'
        :return: True if project is create successfully, False otherwise
        """
        if self.__view.startUi():
            value = self.__view.exec_()

            # Errors
            while value < 0:
                value = self.__view.exec_()
            # OK
            if value > 0:
                return True
            # Cancel
            elif value == 0:
                return False

    @staticmethod
    def writeComment(pdf, comment):
        """
        Write an optional comment.
        :param pdf: The PDF
        :param comment: The comment that we will write
        :return: None
        """
        comment = str(comment)
        if comment != "":
            pdf.titleSection("Comments", 1)

            if comment.endswith("."):
                comment = comment[:-1]

            # Get comment and split by dot
            tokens = (comment.replace(". ", ".")).split(".")
            l = len(tokens)
            for x, token in enumerate(tokens):
                if x == 0:
                    pdf.writeText("Comment: ", token, 25)
                elif x != l:
                    pdf.writeText("", token, 25)

    def writeExploitAvailable(self, pdf):
        """
        Write the exploits that we use it.
        :param pdf: The PDF object
        :return: None
        """

        # Get all exploits
        items = self.__projectFile.getSections("Exploit")
        if items:
            pdf.titleSection("Exploits available", 1)
            for i, section in enumerate(items, 1):
                pdf.titleSection("#{0} Exploit".format(i), 2)
                pdf.writeText("Name: ", section[0][1], 15)
                pdf.writeText("Author(s): ", section[1][1], 20)

                # Get description and split by dot
                description = str(section[2][1])
                if description.endswith("."):
                    description = description[:-1]

                tokens = description.replace(". ", ".").split(".")
                l = len(tokens)
                for x, token in enumerate(tokens):
                    if x == 0:
                        pdf.writeText("Description: ", token, 25)
                    # Last dot
                    elif x != l:
                        pdf.writeText("", token, 25)

                cwe = Parse.removeHTML(Parse.CWEToLink(int(section[3][1])))
                pdf.writeText("CWE: ", cwe, 15)
                pdf.writeText("Targets: ", section[4][1], 20)
                pdf.writeText("References: ", Parse.removeHTML(section[5][1]), 25)

    def writeGeneralInformation(self, pdf):
        """
        Write the general information about the project like Name, IP, MAC...
        :param pdf: The PDF object
        :return: None
        """
        pdf.titleSection("General Information", 1)
        pdf.writeText("Project's name: ", self.__projectFile.readValue("Information", "Name"), 30)
        pdf.writeText("IP Address: ", self.__projectFile.readValue("Information", "IP"), 22)
        pdf.writeText("MAC Address: ", self.__projectFile.readValue("Information", "MAC"), 28)
        pdf.writeText("OUI: ", self.__projectFile.readValue("Information", "OUI"), 12)
        pdf.writeText("Company: ", self.__projectFile.readValue("Information", "Company"), 20)
        pdf.writeText("Router: ", self.__projectFile.readValue("Information", "Router"), 15)

    def writePortsServices(self, pdf):
        """
        Write the ports and services we are scanned
        :param pdf: The PDF object
        :return: None
        """
        # Get targets
        items = self.__projectFile.getSections("Target")
        if items:
            pdf.titleSection("Ports & services discovered", 1)
            items = self.__projectFile.getSections("Target")
            for i, section in enumerate(items, 1):
                pdf.titleSection("#{0} Service".format(i), 2)
                pdf.writeText("Protocol: ", section[0][1], 20)
                pdf.writeText("Port: ", section[1][1], 10)
                pdf.writeText("Service: ", section[2][1], 20)
                pdf.writeText("State: ", section[3][1], 15)
                pdf.writeText("Product: ", section[4][1], 20)
                pdf.writeText("Extra: ", section[5][1], 20)

