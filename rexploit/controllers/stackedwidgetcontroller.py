# Imports
from rexploit.views.aux.messagebox import MessageBox
from rexploit.views.widget.exploits.crosssiterequestforgeryview import CrossSiteRequestForgeryView
from rexploit.views.widget.exploits.backdoorview import BackdoorView
from rexploit.views.widget.exploits.bruteforceview import BruteForceView
from rexploit.views.widget.exploits.generatorview import GeneratorView
from rexploit.views.widget.exploits.informationdisclosureview import InformationDisclosureView
from rexploit.views.widget.exploits.localfileinclusionview import LocalFileInclusionView


class StackedWidgetController(object):

    """
        This class is a controller that manages a stacked widget.
        It is use to get a better control over exploits widget
    """

    def __init__(self, parent):
        """Initialize the controller object and all attributes that it needs"""
        # Store all widget
        self.__widgets = {}

        # Store the exploits' name as key and widget as value
        self.__exploits = {}

        self.__parent = parent

    def addWidget(self, widget):
        """
        Add a widget to dict
        :param widget: the widget that we want to add
        :return: None
        """
        widget.hide()
        self.__widgets[widget.category] = widget

    def getWidget(self, category):
        """
        Get the widget associate to the category and his parent
        :param category: category name
        :return: a widget
        """
        try:
            widget = self.__widgets[category]
            return widget.__class__(self.__parent)
        except KeyError:
            return None

    def getWidgetWithExploit(self, exploit):
        """
        Get the widget associate with this exploit name
        :param exploit: exploit's name
        :return: a widget
        """
        return self.__exploits[exploit] if exploit in self.__exploits else None

    def loadWidgets(self):
        """
        Load all widget
        :return: None
        """
        try:
            self.addWidget(CrossSiteRequestForgeryView(self.__parent))
            self.addWidget(BackdoorView(self.__parent))
            self.addWidget(BruteForceView(self.__parent))
            self.addWidget(GeneratorView(self.__parent))
            self.addWidget(InformationDisclosureView(self.__parent))
            self.addWidget(LocalFileInclusionView(self.__parent))
        except EOFError as e:
            MessageBox.critical("Error", str(e))
        except AttributeError as e:
            MessageBox.critical("Error", str(e))
            exit(-1)

    def setExploitWidget(self, name, widget):
        """
        Set the exploit's name as key and widget as value
        :param name: exploit's name
        :param widget: a widget
        :return: None
        """
        self.__exploits[name] = widget
