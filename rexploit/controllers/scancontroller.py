# Imports
from rexploit.controllers.profilescontroller import ProfilesController
from rexploit.lib.thread.communicate import Communicate
from rexploit.lib.thread.scanthread import ScanThread
from rexploit.models.target import Target
from rexploit.views.aux.messagebox import MessageBox
from rexploit.views.widget.tab.scanview import ScanView


class ScanController(object):
    
    """
        This class is a controller that manages the 'Scan View' and all action that are related with 
        scan an IP.
    """
    
    def __init__(self, parent):
        """Initialize the controller object and all attributes that it needs"""
        # Signal
        self.__communicate = Communicate()

        # Thread
        self.__scanThread = ScanThread(self.__communicate)
        self.__view = ScanView(self, parent)
        self.__projectFile = None
        self.__IP = None

        # Profiles Controller
        self.__profilesController = ProfilesController()

        # Connect signal
        self.__communicate.finishScan.connect(self.__view.setItemsScanned)

    def cancel(self):
        """
        This function is executed when scan is cancelled
        :return: None
        """
        self.__scanThread.terminate()
        self.__view.setState("start")

    def createProfile(self):
        """
        This function is executed when we add a new profile
        :return: None
        """
        self.__profilesController.show()
        profiles = self.__profilesController.getProfiles()
        self.__view.addProfiles(profiles)

    def getCommand(self, profile):
        """
        Get the command associate to a profile.
        :param profile: profile's name
        :return: the command
        """
        return self.__profilesController.getCommand(profile)

    def getWidget(self):
        """
        Get the widget view
        :return: the widget
        """
        return self.__view

    @property
    def projectFile(self):
        """
        Get a project file.
        :return: A project file
        """
        return self.__projectFile

    @projectFile.setter
    def projectFile(self, projectFile):
        """
        Set a project file object
        :param projectFile: a project file object
        :return: None
        """
        self.__projectFile = projectFile

        self.__view.addProfiles(self.__profilesController.getProfiles())
        self.__IP = str(self.__projectFile.readValue("Information", "IP"))

        items = self.__projectFile.getSections("Target")
        if items:
            targets = []
            for section in items:
                target = Target(
                    protocol=section[0][1],
                    port=section[1][1],
                    name=section[2][1],
                    state=section[3][1],
                    product=section[4][1],
                    info=section[5][1])

                targets.append(target)

            self.__view.setItemsScanned(targets)
        else:
            self.__view.setState("start")

    def removeProfile(self, profile):
        """
        Remove the profile that receive
        :param profile: the profile that we want to remove
        :return: None
        """
        if MessageBox.question("Remove Profile", "Do you want remove this profile \'{0}\' ".format(profile)):
            self.__profilesController.removeProfile(profile)
            profiles = self.__profilesController.getProfiles()
            self.__view.addProfiles(profiles)

    def save(self):
        """
        Save all items on a file. Firstly we get all items that appear on table and we save it.
        :return: True if it was saved successfully, False otherwise.
        """
        targets = []
        row, col = self.__view.rowColumnCount()

        for i in xrange(row):
            item = map(lambda j: self.__view.getItemText(i, j), range(col))
            target = Target(
                protocol=item[0],
                port=item[1],
                name=item[2],
                state=item[3],
                product=item[4],
                info=item[5])

            targets.append(target)

        if targets:
            for i, target in enumerate(targets):
                section = "Target_%s" % i
                try:
                    if not self.__projectFile.readValue(section, "Port") == target.port:
                        self.__projectFile.write(section, "Protocol", target.protocol)
                        self.__projectFile.write(section, "Port", target.port)
                        self.__projectFile.write(section, "Name", target.name)
                        self.__projectFile.write(section, "State", target.state)
                        self.__projectFile.write(section, "Product",
                                                 "{0} {1}".format(target.product, target.version))
                        self.__projectFile.write(section, "Extra", target.info)
                except Exception as e:
                    MessageBox.critical("Error", e.message)
                    return False

        return True

    def start(self, arguments):
        """
        This function is executed when we start to scan
        Create a thread by each scan
        :param arguments: It is a command
        :return: None
        """
        if not self.__IP:
            MessageBox.critical("Error", "IP not found")
        elif not arguments:
            MessageBox.critical("Error", "Command is empty")
        elif self.__scanThread.isRunning():
            MessageBox.critical("Error", "A scanning is running")
        else:
            self.__view.setState("scan")
            self.__IP = str(self.__projectFile.readValue("Information", "IP"))

            # Options thread
            self.__scanThread.host = self.__IP
            self.__scanThread.arguments = arguments
            self.__scanThread.start()
