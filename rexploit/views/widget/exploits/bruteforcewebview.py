from os.path import exists

from PyQt4.QtCore import QRegExp
from PyQt4.QtGui import QRegExpValidator, QValidator
from rexploit.interfaces.widget import Widget
from rexploit.lib.io.network import Network
from rexploit.lib.misc.generator import Generator
from rexploit.lib.thread.communicate import Communicate
from rexploit.lib.thread.exploitthread import ExploitThread
from rexploit.views.aux.filedialog import FileDialog
from rexploit.views.aux.messagebox import MessageBox

from rexploit.lib.misc.parse import Parse


class BruteForceWebView(Widget):

    def __init__(self, parent):
        super(BruteForceWebView, self).__init__("bruteforceweb", parent)
        self.category = "bfweb"

        regex = QRegExp("\d{1,6}")
        self.__validator = QRegExpValidator(regex, self.lineEditPort)
        self.lineEditPort.setValidator(self.__validator)

        # Connect buttons
        self.pushButtonExploit.clicked.connect(self.pushButtonExploitClicked)
        self.pushButtonCancel.clicked.connect(self.pushButtonCancelClicked)
        self.toolButtonUsers.clicked.connect(self.toolButtonUsersClicked)
        self.toolButtonPasswords.clicked.connect(self.toolButtonPasswordsClicked)

        # Connect signal and thread
        self.__communicate = Communicate()
        self.__exploitThread = ExploitThread(self.__communicate)
        self.__communicate.finishExploit.connect(self.setResultExploit)

        # Button and progressbar
        self.setProgressBarState(0)
        self.pushButtonCancel.setEnabled(False)

        # Generator
        self.__generatorUsers = Generator()
        self.__generatorPasswords = Generator()

    def check(self):
        if Network.ping(self.exploit.ip):
            if not self.isPort() or not str(self.lineEditUsers.text()) or not str(self.lineEditPasswords.text()):
                MessageBox.critical("Error", "You have to complete the information")
                return False
            else:
                users = str(self.lineEditUsers.text())
                lusers = str(self.lineEditLengthsUsers.text())
                passwords = str(self.lineEditPasswords.text())
                lpasswords = str(self.lineEditLengthsPasswords.text())
                if not self.__generatorUsers.check(users, lusers) or not self.__generatorPasswords.check(passwords,
                                                                                                         lpasswords):
                    MessageBox.critical("Error", "Each range need a length")
                    return False
                else:
                    return True
        else:
            MessageBox.critical("Error", "Destination Host Unreachable")
            return False

    def isPort(self):
        if str(self.lineEditPort.text()):
            state = self.__validator.validate(str(self.lineEditPort.text()), 0)[0]
            return state == QValidator.Acceptable
        else:
            return False

    def pushButtonCancelClicked(self):
        self.__exploitThread.terminate()
        self.setProgressBarState(3)
        self.pushButtonCancel.setEnabled(False)
        self.pushButtonExploit.setEnabled(True)

    def pushButtonExploitClicked(self):
        if self.check():
            self.plainTextEditData.clear()
            try:
                self.setProgressBarState(2)
                self.pushButtonExploit.setEnabled(False)
                self.pushButtonCancel.setEnabled(True)

                if str(self.lineEditUsers.text()):
                    if exists(str(self.lineEditUsers.text())):
                        users = Parse.getContentFromFile(str(self.lineEditUsers.text()))
                    else:
                        users = self.__generatorUsers.create()
                else:
                    users = None

                if str(self.lineEditPasswords.text()):

                    if exists(str(self.lineEditPasswords.text())):
                        passwords = Parse.getContentFromFile(str(self.lineEditPasswords.text()))
                    else:
                        passwords = self.__generatorPasswords.create()
                else:
                    passwords = None

                if str(self.lineEditURL.text()):
                    url = str(self.lineEditURL.text())
                else:
                    url = None

                if not users or not passwords and not url:
                    MessageBox.critical("Error", "An error happened while items generation or read the dictionary.")
                    self.pushButtonCancelClicked()

                data = {"port": int(self.lineEditPort.text()), "users": users, "passwords": passwords, "url": url}

                self.__exploitThread.setExploit(self.__exploit, data)
                self.__exploitThread.start()
            except Exception as e:
                MessageBox.critical("Error", str(e.args))

    def setExploit(self, exploit):
        self.exploit = exploit
        self.plainTextEditData.appendPlainText("")
        default = self.exploit.default()
        if default:
            try:
                self.lineEditPort.setText(default["port"])
                self.lineEditUsers.setText(default["users"])
                self.lineEditPasswords.setText(default["passwords"])
                self.lineEditURL.setText(default["url"])

            except KeyError:
                pass

    def setProgressBarState(self, state):
        if state == 0:
            self.progressBar.hide()
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(0)
        elif state == 1:
            self.progressBar.setFormat("Waiting")
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(0)
        elif state == 2:
            self.progressBar.setFormat("Exploiting")
            self.progressBar.setRange(0, 0)
            self.progressBar.show()
        elif state == 3:
            self.progressBar.setFormat("Completed")
            self.progressBar.setRange(0, 1)
            self.progressBar.setValue(1)
            self.progressBar.show()

    def setResultExploit(self, result):
        if "Success" in result:
            self.exploit.vulnerable = True
            self.setCheckBoxVulnerableChecked()

        self.plainTextEditData.appendPlainText(result)
        self.setProgressBarState(3)
        self.pushButtonExploit.setEnabled(True)

    def toolButtonUsersClicked(self):
        self.lineEditUsers.setText(FileDialog.getOpenFileName("txt"))

    def toolButtonPasswordsClicked(self):
        self.lineEditPasswords.setText(FileDialog.getOpenFileName("txt"))
