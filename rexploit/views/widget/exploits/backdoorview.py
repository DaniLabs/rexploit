from rexploit.interfaces.widget import Widget
from rexploit.lib.io.network import Network
from rexploit.views.aux.messagebox import MessageBox

from rexploit.lib.misc.parse import Parse


class BackdoorView(Widget):

    def __init__(self, parent):
        super(BackdoorView, self).__init__("backdoor", parent)
        self.category = "backdoor"

        # Connect buttons
        self.pushButtonExploit.clicked.connect(self.pushButtonExploitClicked)
        self.pushButtonCheck.clicked.connect(self.pushButtonCheckClicked)

    def check(self):
        if Network.ping(self.exploit.ip):
            if str(self.lineEditCommand.text()):
                return True
            else:
                MessageBox.critical("Error", "You must write a command")
                return False
        else:
            MessageBox.critical("Error", "Destination Host Unreachable")
            return False

    def pushButtonCheckClicked(self):
        if self.check():
            if self.exploit.check():
                self.vulnerable = True
            else:
                self.plainTextEditData.appendPlainText("")
                self.plainTextEditData.appendPlainText("Error. The target is not vulnerable")

    def pushButtonExploitClicked(self):
        if self.check():
            self.plainTextEditData.clear()
            try:
                data = Parse.sanatizeJSONOutput(str(self.lineEditCommand.text()))
                result = self.exploit.run(data)
                self.plainTextEditData.appendPlainText(result)
                if self.exploit.vulnerable:
                    self.vulnerable = True
            except Exception as e:
                MessageBox.critical("Error", str(e.message))

    def setExploit(self, exploit):
        self.exploit = exploit
        self.plainTextEditData.appendPlainText("")
        default = self.exploit.default()
        if default:
            default = Parse.sanatizeJSONInput(default)
            self.lineEditCommand.setText(default)
