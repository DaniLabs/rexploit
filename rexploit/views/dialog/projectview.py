# Imports
from os import W_OK, access
from os.path import expanduser, join, exists
from PyQt4.QtCore import QRegExp
from PyQt4.QtGui import QRegExpValidator, QValidator
from rexploit.interfaces.dialog import Dialog
from rexploit.lib.io.network import Network
from rexploit.views.aux.messagebox import MessageBox

from rexploit.views.aux.filedialog import FileDialog


class ProjectView(Dialog):

    """
        This class is a view inherit from QDialog.  This class permits create a new project
    """
    def __init__(self, projectController):
        """Initialize the view object and all attributes that it needs"""
        super(ProjectView, self).__init__()
        self.__projectController = projectController
        self.__validator = None

    def buttonBoxAccepted(self):
        """This function is executed when buttonBox OK is clicked."""
        if self.isName() and self.isLocation() and self.isIP():
            self.__projectController = self.__projectController.create(
                str(self.lineEditName.text()),
                str(self.lineEditIP.text()),
                str(self.lineEditLocation.text()))
            self.accept()
            self.done(1)
        else:
            self.done(-1)

    def buttonBoxRejected(self):
        """This function is executed when buttonBox Cancel is clicked."""
        self.reject()

    def isLocation(self):
        """
        Check if lineEdit location is well formed
        :return: True if we can create a project on this path, False otherwise
        """
        location = str(self.lineEditLocation.text())
        name = str(self.lineEditName.text())
        path = join(location, name + ".ini")
        if not exists(path) and access(str(self.lineEditLocation.text()), W_OK):
            return True
        else:
            MessageBox.critical("Error", "Exist a report with same name on this path ({}).".format(path))
            return False

    def isName(self):
        """
        Check if lineEdit name is not empty
        :return: True if  name is not empty, False otherwise
        """
        if str(self.lineEditName.text()):
            return True
        else:
            MessageBox.critical("Error", "You have to complete the information")
            return False

    def isIP(self):
        """
        Check if lineEdit IP is well formed
        :return: True if IP is well formed and it is reachable, False otherwise
        """

        IP = self.lineEditIP.text()
        if IP:
            # Verify if the IP "matches" the regular expression
            state = self.__validator.validate(IP, 0)[0]
            if state == QValidator.Acceptable:
                if Network.ping(IP):
                    return True
                else:
                    MessageBox.critical("Error", "Destination Host Unreachable.")
                    return False
            else:
                MessageBox.critical("Error", "You have to add a valid IP (0.0.0.0).")
                return False
        else:
            MessageBox.information("Information", "You have not add a IP on this project.")
            return True

    def startUi(self):
        """This function checks if ui file exists and then show the view"""
        try:
            self.load("project")

            self.lineEditLocation.setText(expanduser("~"))
            regex = QRegExp("\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")
            self.__validator = QRegExpValidator(regex, self.lineEditIP)
            self.lineEditIP.setValidator(self.__validator)

            # Connect things
            self.buttonBox.rejected.connect(self.buttonBoxRejected)
            self.buttonBox.accepted.connect(self.buttonBoxAccepted)
            self.toolButton.clicked.connect(self.toolButtonClicked)
            return True
        except Exception as e:
            MessageBox.critical("Error", str(e))
            return False

    def toolButtonClicked(self):
        """This function is executed when ToolButton is clicked."""
        self.lineEditLocation.setText(FileDialog.getExistingDirectory())
