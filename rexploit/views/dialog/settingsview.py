# Imports
from os import W_OK, access
from os.path import join, exists
from PyQt4.QtCore import QRegExp
from PyQt4.QtGui import QRegExpValidator, QValidator
from rexploit.interfaces.dialog import Dialog
from rexploit.lib.io.network import Network
from rexploit.views.aux.messagebox import MessageBox
from rexploit.views.aux.filedialog import FileDialog


class SettingsView(Dialog):

    """
        This class is a view inherit from QDialog. This class permits changes some information about the project.
    """

    def __init__(self, settingsController):
        """Initialize the view object and all attributes that it needs"""
        super(SettingsView, self).__init__()
        self.__settingsController = settingsController
        self.__name = None
        self.__location = None
        self.__validator = None

    def buttonBoxRejected(self):
        """This function is executed when buttonBox Cancel is clicked."""
        self.reject()

    def buttonBoxAccepted(self):
        """This function is executed when buttonBox OK is clicked."""
        if self.isName() and self.isLocation() and self.isIP():
            data = {'name': str(self.lineEditProjectName.text()),
                    'location': str(self.lineEditLocation.text()),
                    'IP': str(self.lineEditIP.text()),
                    'mac': str(self.labelMAC.text()),
                    'oui': str(self.labelOUI.text()),
                    'company': str(self.labelCompany.text())}
            self.__settingsController.save(data)
            self.accept()
            self.done(1)
        else:
            self.done(-1)

    def isLocation(self):
        """
        Check if lineEdit location is well formed
        :return: True if we can create a project on this path, False otherwise
        """

        location = str(self.lineEditLocation.text())
        name = str(self.lineEditProjectName.text())
        if location == self.__location and name == self.__name:
            # Same path and filename
            return True
        else:
            if not exists(join(location, name + ".ini")) and access(str(self.lineEditLocation.text()), W_OK):
                return True
            else:
                MessageBox.critical("Error", "Exist a project with same name on this path.")
                return False

    def isName(self):
        """
        Check if lineEdit name is not empty
        :return: True if  name is not empty, False otherwise
        """

        if str(self.lineEditProjectName.text()):
            return True
        else:
            MessageBox.critical("Error", "You have to complete the information")
            return False

    def isIP(self):
        """
        Check if lineEdit IP is well formed
        :return: True if IP is well formed and it is reachable, False otherwise
        """

        # Verify if the IP "matches" the regular expression
        IP = self.lineEditIP.text()
        if IP:
            state = self.__validator.validate(IP, 0)[0]
            if state == QValidator.Acceptable:
                return True
            else:
                MessageBox.critical("Error", "You have to add a valid IP (0.0.0.0).")
                return False
        else:
            MessageBox.information("Information", "You have not add a IP on this project.")
            return True

    def startUi(self):
        """This function checks if ui file exists and then show the view"""
        try:
            self.load("settings")

            regex = QRegExp("\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")
            self.__validator = QRegExpValidator(regex, self.lineEditIP)
            self.lineEditIP.setValidator(self.__validator)

            # Connect things
            self.buttonBox.rejected.connect(self.buttonBoxRejected)
            self.buttonBox.accepted.connect(self.buttonBoxAccepted)
            self.toolButton.clicked.connect(self.toolButtonClicked)
            self.pushButtonPing.clicked.connect(self.pushButtonPingClicked)
            return True
        except Exception as e:
            MessageBox.critical("Error", str(e))
            return False

    def pushButtonPingClicked(self):
        if Network.ping(str(self.lineEditIP.text())):
            buttons = self.buttonBox.buttons()
            buttons[0].setEnabled(True)
            mac, oui, company = self.__settingsController.getInformation(str(self.lineEditIP.text()))
            self.labelMAC.setText(mac)
            self.labelOUI.setText(oui)
            self.labelCompany.setText(company)
        else:
            buttons = self.buttonBox.buttons()
            buttons[0].setEnabled(False)
            MessageBox.critical("Error", "Destination Host Unreachable")

    def setInformation(self, data):
        self.lineEditProjectName.setText(str(data['name']))
        self.lineEditLocation.setText(str(data['location']))
        self.lineEditIP.setText(str(data['IP']))
        self.labelMAC.setText(str(data['mac']))
        self.labelOUI.setText(str(data['oui']))
        self.labelCompany.setText(str(data['company']))
        self.labelRouter.setText(str(data['router']))

        self.__name = data['name']
        self.__location = data['location']

    def toolButtonClicked(self):
        """This function is executed when ToolButton is clicked."""
        self.lineEditLocation.setText(FileDialog.getExistingDirectory())
