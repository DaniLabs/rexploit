from PyQt4.uic import loadUi
from PyQt4.QtCore import Qt
from PyQt4.QtGui import QWidget
from rexploit.lib.misc.parse import Parse
from os.path import join, dirname


class Widget(QWidget):
    def __init__(self, name, parent):
        super(Widget, self).__init__(parent)
        ui = join(dirname(__file__.split('rexploit')[0]),
                  join("rexploit", "data", "ui", "widgets", "exploits", "{0}.ui".format(name)))

        loadUi(ui, self)
        self.__exploit = None
        self.__vulnerable = False
        self.parent = parent
        self.category = None

        # Connect things
        self.checkBoxVulnerable.stateChanged.connect(self.__checkBoxVulnerableStateChanged)

        # Labels
        self.labelAuthor.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDate.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelTarget.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.labelDescription.setWordWrap(True)

        self.labelCWE.setTextFormat(Qt.RichText)
        self.labelCWE.setTextInteractionFlags(Qt.TextBrowserInteraction)
        self.labelCWE.setOpenExternalLinks(True)

        self.labelReferences.setTextFormat(Qt.RichText)
        self.labelReferences.setTextInteractionFlags(Qt.TextBrowserInteraction)
        self.labelReferences.setOpenExternalLinks(True)

        # Set verticalLayout. It's resize the widget
        self.setLayout(self.verticalLayout)

    def __checkBoxVulnerableStateChanged(self):
        """This function executes when checkbox changes state"""
        if self.checkBoxVulnerable.isChecked():
            self.parent.addExploitSuccess(self.__exploit)
        else:
            self.parent.removeExploitSuccess(self.__exploit)

    def setCheckBoxVulnerableChecked(self, checked=True):
        """
        This function changes checkbox's state
        :param checked: True or False
        :return: None
        """
        if checked:
            self.checkBoxVulnerable.setCheckState(Qt.Checked)
        else:
            self.checkBoxVulnerable.setCheckState(Qt.Unchecked)

    @staticmethod
    def check(self):
        """This function check all thing that you need before exploit will run"""
        pass

    @property
    def exploit(self):
        """
        Get the exploit
        :return: the exploit
        """
        return self.__exploit

    @exploit.setter
    def exploit(self, exploit):
        """
        Setter the exploit
        :param exploit: the exploit
        :return: None
        """
        self.__exploit = exploit
        self.labelNameExploit.setText(self.__exploit.name)
        self.labelAuthor.setText(self.__exploit.authors)
        self.labelDate.setText(self.__exploit.date)
        self.labelCWE.setText(Parse.CWEToLink(self.__exploit.cwe))
        self.labelTarget.setText(self.__exploit.target)
        self.labelReferences.setText(self.__exploit.references)
        self.labelDescription.setText(self.__exploit.description)

    def setExploit(self, exploit):
        """
        This function executes when a element's list is clicked.
        :param exploit: the exploit
        :return: None
        """
        pass

    @property
    def vulnerable(self):
        return self.__vulnerable

    @vulnerable.setter
    def vulnerable(self, state):
        self.__vulnerable = state
        self.__exploit.vulnerable = state
        self.setCheckBoxVulnerableChecked(state)
