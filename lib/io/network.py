from re import search, M, I
from subprocess import Popen, PIPE, CalledProcessError
from sys import platform
from requests import get, exceptions


class Network(object):
    @staticmethod
    def arp(IP):
        try:
            pid = Popen(["arp", "-n", IP], stdout=PIPE)
            result = search(r"(([a-f\d]{1,2}\:){5}[a-f\d]{1,2})", pid.communicate()[0])

            if result:
                mac = result.groups()[0]
                oui = "".join(map(lambda i: mac.split(":")[i].upper(), range(3)))
                return mac, oui
            else:
                return None, None
        except CalledProcessError:
            return False

    @staticmethod
    def downloadFile(path, url):
        with open(path, 'wb') as handle:
            # stream=True for raw files
            try:
                response = get(url, stream=True)
                if response.ok:
                    for block in response.iter_content(1024):
                        handle.write(block)
                    return True
                else:
                    return False
            except exceptions.ConnectionError:
                return False

    @staticmethod
    def ping(IP):
        try:
            cmd = ["ping", "-n 1", IP] if platform == 'win32' else ["ping", "-c 1 -W 1", IP]

            p = Popen(cmd, stdout=PIPE, stderr=PIPE)

            out, error = p.communicate()

            if search(r'0 received', out, M | I):
                return False
            else:
                return True
        except CalledProcessError:
            return False
