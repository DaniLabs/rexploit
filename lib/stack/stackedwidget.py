from views.exploits.authenticationbypass import AuthenticationBypassView
from views.exploits.generatorview import GeneratorView
from views.exploits.localfileinclusionview import LocalFileInclusionView
from views.exploits.informationdisclosure import InformationDisclosureView
from views.exploits.bruteforce import BruteForceView
from views.exploits.bruteforceweb import BruteForceWebView


class StackedWidget(object):
    def __init__(self, parent):
        self.__widgets = {}
        self.__exploitsWidgets = {}

        self.addWidget(AuthenticationBypassView(parent))
        self.addWidget(BruteForceView(parent))
        self.addWidget(BruteForceWebView(parent))
        self.addWidget(GeneratorView(parent))
        self.addWidget(InformationDisclosureView(parent))
        self.addWidget(LocalFileInclusionView(parent))

    def addWidget(self, widget):
        widget.hide()
        self.__widgets[widget.getCategory()] = widget

    def getWidget(self, category, parent):
        widget = self.__widgets[category]
        return widget.__class__(parent)

    def setExploitWidget(self, exploit, widget):
        self.__exploitsWidgets[exploit] = widget

    def getExploit(self, exploit):
        if exploit in self.__exploitsWidgets:
            return self.__exploitsWidgets[exploit]
        else:
            return None
